// Generated by gosql: DO NOT EDIT.
package controllers

import (
	"encoding/json"

	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type FilterValue struct {
	Equals    *string `json:"equals"`
	NotEquals *string `json:"notEquals"`
	// IsNull *bool `json:"isNull"`
	// IsNotNull *bool `json:"isNotNull"`
	IsIn                 *[]string `json:"isIn"`
	IsNotIn              *[]string `json:"isNotIn"`
	IsLessThan           *string   `json:"isLessThan"`
	IsLessThanOrEqual    *string   `json:"isLessThanOrEqual"`
	IsGreaterThan        *string   `json:"isGreaterThan"`
	IsGreaterThanOrEqual *string   `json:"isGreaterThanOrEqual"`
}

type AccountFilter struct {
	Id                *FilterValue `json:"id"`
	Name              *FilterValue `json:"name"`
	ProfilePictureUrl *FilterValue `json:"profilePictureUrl"`
	Email             *FilterValue `json:"email"`
	Password          *FilterValue `json:"password"`
	CreatedAt         *FilterValue `json:"createdAt"`
	UpdatedAt         *FilterValue `json:"updatedAt"`
}

func parseAccountFilter(filter string) (*AccountFilter, error) {
	var filterValue AccountFilter
	if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
		return nil, err
	}

	return &filterValue, nil
}

func parseAccountFilterToMods(filter *AccountFilter) ([]qm.QueryMod, error) {
	var queryMods []qm.QueryMod

	if filter.Id != nil {
		if filter.Id.Equals != nil {
			queryMods = append(queryMods, qm.Where("id = ?", *filter.Id.Equals))
		}

		if filter.Id.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("id != ?", *filter.Id.NotEquals))
		}

		if filter.Id.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id IN ?", *filter.Id.IsIn))
		}

		if filter.Id.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id NOT IN ?", *filter.Id.IsNotIn))
		}

		if filter.Id.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("id < ?", *filter.Id.IsLessThan))
		}

		if filter.Id.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id <= ?", *filter.Id.IsLessThanOrEqual))
		}

		if filter.Id.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("id > ?", *filter.Id.IsGreaterThan))
		}

		if filter.Id.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id >= ?", *filter.Id.IsGreaterThanOrEqual))
		}
	}
	if filter.Name != nil {
		if filter.Name.Equals != nil {
			queryMods = append(queryMods, qm.Where("name = ?", *filter.Name.Equals))
		}

		if filter.Name.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("name != ?", *filter.Name.NotEquals))
		}

		if filter.Name.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("name IN ?", *filter.Name.IsIn))
		}

		if filter.Name.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("name NOT IN ?", *filter.Name.IsNotIn))
		}

		if filter.Name.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("name < ?", *filter.Name.IsLessThan))
		}

		if filter.Name.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("name <= ?", *filter.Name.IsLessThanOrEqual))
		}

		if filter.Name.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("name > ?", *filter.Name.IsGreaterThan))
		}

		if filter.Name.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("name >= ?", *filter.Name.IsGreaterThanOrEqual))
		}
	}
	if filter.ProfilePictureUrl != nil {
		if filter.ProfilePictureUrl.Equals != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url = ?", *filter.ProfilePictureUrl.Equals))
		}

		if filter.ProfilePictureUrl.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url != ?", *filter.ProfilePictureUrl.NotEquals))
		}

		if filter.ProfilePictureUrl.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("profile_picture_url IN ?", *filter.ProfilePictureUrl.IsIn))
		}

		if filter.ProfilePictureUrl.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("profile_picture_url NOT IN ?", *filter.ProfilePictureUrl.IsNotIn))
		}

		if filter.ProfilePictureUrl.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url < ?", *filter.ProfilePictureUrl.IsLessThan))
		}

		if filter.ProfilePictureUrl.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url <= ?", *filter.ProfilePictureUrl.IsLessThanOrEqual))
		}

		if filter.ProfilePictureUrl.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url > ?", *filter.ProfilePictureUrl.IsGreaterThan))
		}

		if filter.ProfilePictureUrl.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url >= ?", *filter.ProfilePictureUrl.IsGreaterThanOrEqual))
		}
	}
	if filter.Email != nil {
		if filter.Email.Equals != nil {
			queryMods = append(queryMods, qm.Where("email = ?", *filter.Email.Equals))
		}

		if filter.Email.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("email != ?", *filter.Email.NotEquals))
		}

		if filter.Email.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("email IN ?", *filter.Email.IsIn))
		}

		if filter.Email.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("email NOT IN ?", *filter.Email.IsNotIn))
		}

		if filter.Email.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("email < ?", *filter.Email.IsLessThan))
		}

		if filter.Email.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("email <= ?", *filter.Email.IsLessThanOrEqual))
		}

		if filter.Email.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("email > ?", *filter.Email.IsGreaterThan))
		}

		if filter.Email.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("email >= ?", *filter.Email.IsGreaterThanOrEqual))
		}
	}
	if filter.Password != nil {
		if filter.Password.Equals != nil {
			queryMods = append(queryMods, qm.Where("password = ?", *filter.Password.Equals))
		}

		if filter.Password.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("password != ?", *filter.Password.NotEquals))
		}

		if filter.Password.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("password IN ?", *filter.Password.IsIn))
		}

		if filter.Password.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("password NOT IN ?", *filter.Password.IsNotIn))
		}

		if filter.Password.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("password < ?", *filter.Password.IsLessThan))
		}

		if filter.Password.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("password <= ?", *filter.Password.IsLessThanOrEqual))
		}

		if filter.Password.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("password > ?", *filter.Password.IsGreaterThan))
		}

		if filter.Password.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("password >= ?", *filter.Password.IsGreaterThanOrEqual))
		}
	}
	if filter.CreatedAt != nil {
		if filter.CreatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("created_at = ?", *filter.CreatedAt.Equals))
		}

		if filter.CreatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("created_at != ?", *filter.CreatedAt.NotEquals))
		}

		if filter.CreatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at IN ?", *filter.CreatedAt.IsIn))
		}

		if filter.CreatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at NOT IN ?", *filter.CreatedAt.IsNotIn))
		}

		if filter.CreatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("created_at < ?", *filter.CreatedAt.IsLessThan))
		}

		if filter.CreatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at <= ?", *filter.CreatedAt.IsLessThanOrEqual))
		}

		if filter.CreatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("created_at > ?", *filter.CreatedAt.IsGreaterThan))
		}

		if filter.CreatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at >= ?", *filter.CreatedAt.IsGreaterThanOrEqual))
		}
	}
	if filter.UpdatedAt != nil {
		if filter.UpdatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("updated_at = ?", *filter.UpdatedAt.Equals))
		}

		if filter.UpdatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("updated_at != ?", *filter.UpdatedAt.NotEquals))
		}

		if filter.UpdatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at IN ?", *filter.UpdatedAt.IsIn))
		}

		if filter.UpdatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at NOT IN ?", *filter.UpdatedAt.IsNotIn))
		}

		if filter.UpdatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at < ?", *filter.UpdatedAt.IsLessThan))
		}

		if filter.UpdatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at <= ?", *filter.UpdatedAt.IsLessThanOrEqual))
		}

		if filter.UpdatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at > ?", *filter.UpdatedAt.IsGreaterThan))
		}

		if filter.UpdatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at >= ?", *filter.UpdatedAt.IsGreaterThanOrEqual))
		}
	}

	return queryMods, nil
}

type ProxyFilter struct {
	Id               *FilterValue `json:"id"`
	Host             *FilterValue `json:"host"`
	Scheme           *FilterValue `json:"scheme"`
	Port             *FilterValue `json:"port"`
	Username         *FilterValue `json:"username"`
	Password         *FilterValue `json:"password"`
	IsCustomProvider *FilterValue `json:"isCustomProvider"`
	Account          *FilterValue `json:"account"`
	CreatedAt        *FilterValue `json:"createdAt"`
	UpdatedAt        *FilterValue `json:"updatedAt"`
}

func parseProxyFilter(filter string) (*ProxyFilter, error) {
	var filterValue ProxyFilter
	if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
		return nil, err
	}

	return &filterValue, nil
}

func parseProxyFilterToMods(filter *ProxyFilter) ([]qm.QueryMod, error) {
	var queryMods []qm.QueryMod

	if filter.Id != nil {
		if filter.Id.Equals != nil {
			queryMods = append(queryMods, qm.Where("id = ?", *filter.Id.Equals))
		}

		if filter.Id.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("id != ?", *filter.Id.NotEquals))
		}

		if filter.Id.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id IN ?", *filter.Id.IsIn))
		}

		if filter.Id.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id NOT IN ?", *filter.Id.IsNotIn))
		}

		if filter.Id.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("id < ?", *filter.Id.IsLessThan))
		}

		if filter.Id.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id <= ?", *filter.Id.IsLessThanOrEqual))
		}

		if filter.Id.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("id > ?", *filter.Id.IsGreaterThan))
		}

		if filter.Id.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id >= ?", *filter.Id.IsGreaterThanOrEqual))
		}
	}
	if filter.Host != nil {
		if filter.Host.Equals != nil {
			queryMods = append(queryMods, qm.Where("host = ?", *filter.Host.Equals))
		}

		if filter.Host.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("host != ?", *filter.Host.NotEquals))
		}

		if filter.Host.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("host IN ?", *filter.Host.IsIn))
		}

		if filter.Host.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("host NOT IN ?", *filter.Host.IsNotIn))
		}

		if filter.Host.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("host < ?", *filter.Host.IsLessThan))
		}

		if filter.Host.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("host <= ?", *filter.Host.IsLessThanOrEqual))
		}

		if filter.Host.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("host > ?", *filter.Host.IsGreaterThan))
		}

		if filter.Host.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("host >= ?", *filter.Host.IsGreaterThanOrEqual))
		}
	}
	if filter.Scheme != nil {
		if filter.Scheme.Equals != nil {
			queryMods = append(queryMods, qm.Where("scheme = ?", *filter.Scheme.Equals))
		}

		if filter.Scheme.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("scheme != ?", *filter.Scheme.NotEquals))
		}

		if filter.Scheme.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("scheme IN ?", *filter.Scheme.IsIn))
		}

		if filter.Scheme.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("scheme NOT IN ?", *filter.Scheme.IsNotIn))
		}

		if filter.Scheme.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("scheme < ?", *filter.Scheme.IsLessThan))
		}

		if filter.Scheme.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("scheme <= ?", *filter.Scheme.IsLessThanOrEqual))
		}

		if filter.Scheme.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("scheme > ?", *filter.Scheme.IsGreaterThan))
		}

		if filter.Scheme.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("scheme >= ?", *filter.Scheme.IsGreaterThanOrEqual))
		}
	}
	if filter.Port != nil {
		if filter.Port.Equals != nil {
			queryMods = append(queryMods, qm.Where("port = ?", *filter.Port.Equals))
		}

		if filter.Port.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("port != ?", *filter.Port.NotEquals))
		}

		if filter.Port.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("port IN ?", *filter.Port.IsIn))
		}

		if filter.Port.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("port NOT IN ?", *filter.Port.IsNotIn))
		}

		if filter.Port.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("port < ?", *filter.Port.IsLessThan))
		}

		if filter.Port.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("port <= ?", *filter.Port.IsLessThanOrEqual))
		}

		if filter.Port.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("port > ?", *filter.Port.IsGreaterThan))
		}

		if filter.Port.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("port >= ?", *filter.Port.IsGreaterThanOrEqual))
		}
	}
	if filter.Username != nil {
		if filter.Username.Equals != nil {
			queryMods = append(queryMods, qm.Where("username = ?", *filter.Username.Equals))
		}

		if filter.Username.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("username != ?", *filter.Username.NotEquals))
		}

		if filter.Username.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username IN ?", *filter.Username.IsIn))
		}

		if filter.Username.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username NOT IN ?", *filter.Username.IsNotIn))
		}

		if filter.Username.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("username < ?", *filter.Username.IsLessThan))
		}

		if filter.Username.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username <= ?", *filter.Username.IsLessThanOrEqual))
		}

		if filter.Username.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("username > ?", *filter.Username.IsGreaterThan))
		}

		if filter.Username.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username >= ?", *filter.Username.IsGreaterThanOrEqual))
		}
	}
	if filter.Password != nil {
		if filter.Password.Equals != nil {
			queryMods = append(queryMods, qm.Where("password = ?", *filter.Password.Equals))
		}

		if filter.Password.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("password != ?", *filter.Password.NotEquals))
		}

		if filter.Password.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("password IN ?", *filter.Password.IsIn))
		}

		if filter.Password.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("password NOT IN ?", *filter.Password.IsNotIn))
		}

		if filter.Password.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("password < ?", *filter.Password.IsLessThan))
		}

		if filter.Password.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("password <= ?", *filter.Password.IsLessThanOrEqual))
		}

		if filter.Password.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("password > ?", *filter.Password.IsGreaterThan))
		}

		if filter.Password.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("password >= ?", *filter.Password.IsGreaterThanOrEqual))
		}
	}
	if filter.IsCustomProvider != nil {
		if filter.IsCustomProvider.Equals != nil {
			queryMods = append(queryMods, qm.Where("is_custom_provider = ?", *filter.IsCustomProvider.Equals))
		}

		if filter.IsCustomProvider.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("is_custom_provider != ?", *filter.IsCustomProvider.NotEquals))
		}

		if filter.IsCustomProvider.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_custom_provider IN ?", *filter.IsCustomProvider.IsIn))
		}

		if filter.IsCustomProvider.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_custom_provider NOT IN ?", *filter.IsCustomProvider.IsNotIn))
		}

		if filter.IsCustomProvider.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("is_custom_provider < ?", *filter.IsCustomProvider.IsLessThan))
		}

		if filter.IsCustomProvider.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_custom_provider <= ?", *filter.IsCustomProvider.IsLessThanOrEqual))
		}

		if filter.IsCustomProvider.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("is_custom_provider > ?", *filter.IsCustomProvider.IsGreaterThan))
		}

		if filter.IsCustomProvider.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_custom_provider >= ?", *filter.IsCustomProvider.IsGreaterThanOrEqual))
		}
	}
	if filter.Account != nil {
		if filter.Account.Equals != nil {
			queryMods = append(queryMods, qm.Where("account = ?", *filter.Account.Equals))
		}

		if filter.Account.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("account != ?", *filter.Account.NotEquals))
		}

		if filter.Account.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account IN ?", *filter.Account.IsIn))
		}

		if filter.Account.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account NOT IN ?", *filter.Account.IsNotIn))
		}

		if filter.Account.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("account < ?", *filter.Account.IsLessThan))
		}

		if filter.Account.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account <= ?", *filter.Account.IsLessThanOrEqual))
		}

		if filter.Account.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("account > ?", *filter.Account.IsGreaterThan))
		}

		if filter.Account.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account >= ?", *filter.Account.IsGreaterThanOrEqual))
		}
	}
	if filter.CreatedAt != nil {
		if filter.CreatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("created_at = ?", *filter.CreatedAt.Equals))
		}

		if filter.CreatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("created_at != ?", *filter.CreatedAt.NotEquals))
		}

		if filter.CreatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at IN ?", *filter.CreatedAt.IsIn))
		}

		if filter.CreatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at NOT IN ?", *filter.CreatedAt.IsNotIn))
		}

		if filter.CreatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("created_at < ?", *filter.CreatedAt.IsLessThan))
		}

		if filter.CreatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at <= ?", *filter.CreatedAt.IsLessThanOrEqual))
		}

		if filter.CreatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("created_at > ?", *filter.CreatedAt.IsGreaterThan))
		}

		if filter.CreatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at >= ?", *filter.CreatedAt.IsGreaterThanOrEqual))
		}
	}
	if filter.UpdatedAt != nil {
		if filter.UpdatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("updated_at = ?", *filter.UpdatedAt.Equals))
		}

		if filter.UpdatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("updated_at != ?", *filter.UpdatedAt.NotEquals))
		}

		if filter.UpdatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at IN ?", *filter.UpdatedAt.IsIn))
		}

		if filter.UpdatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at NOT IN ?", *filter.UpdatedAt.IsNotIn))
		}

		if filter.UpdatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at < ?", *filter.UpdatedAt.IsLessThan))
		}

		if filter.UpdatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at <= ?", *filter.UpdatedAt.IsLessThanOrEqual))
		}

		if filter.UpdatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at > ?", *filter.UpdatedAt.IsGreaterThan))
		}

		if filter.UpdatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at >= ?", *filter.UpdatedAt.IsGreaterThanOrEqual))
		}
	}

	return queryMods, nil
}

type CredentialFilter struct {
	Id          *FilterValue `json:"id"`
	CsfrToken   *FilterValue `json:"csfrToken"`
	UserAgent   *FilterValue `json:"userAgent"`
	AppId       *FilterValue `json:"appId"`
	Cookie      *FilterValue `json:"cookie"`
	InstagramId *FilterValue `json:"instagramId"`
	CreatedAt   *FilterValue `json:"createdAt"`
	UpdatedAt   *FilterValue `json:"updatedAt"`
}

func parseCredentialFilter(filter string) (*CredentialFilter, error) {
	var filterValue CredentialFilter
	if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
		return nil, err
	}

	return &filterValue, nil
}

func parseCredentialFilterToMods(filter *CredentialFilter) ([]qm.QueryMod, error) {
	var queryMods []qm.QueryMod

	if filter.Id != nil {
		if filter.Id.Equals != nil {
			queryMods = append(queryMods, qm.Where("id = ?", *filter.Id.Equals))
		}

		if filter.Id.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("id != ?", *filter.Id.NotEquals))
		}

		if filter.Id.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id IN ?", *filter.Id.IsIn))
		}

		if filter.Id.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id NOT IN ?", *filter.Id.IsNotIn))
		}

		if filter.Id.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("id < ?", *filter.Id.IsLessThan))
		}

		if filter.Id.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id <= ?", *filter.Id.IsLessThanOrEqual))
		}

		if filter.Id.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("id > ?", *filter.Id.IsGreaterThan))
		}

		if filter.Id.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id >= ?", *filter.Id.IsGreaterThanOrEqual))
		}
	}
	if filter.CsfrToken != nil {
		if filter.CsfrToken.Equals != nil {
			queryMods = append(queryMods, qm.Where("csfr_token = ?", *filter.CsfrToken.Equals))
		}

		if filter.CsfrToken.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("csfr_token != ?", *filter.CsfrToken.NotEquals))
		}

		if filter.CsfrToken.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("csfr_token IN ?", *filter.CsfrToken.IsIn))
		}

		if filter.CsfrToken.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("csfr_token NOT IN ?", *filter.CsfrToken.IsNotIn))
		}

		if filter.CsfrToken.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("csfr_token < ?", *filter.CsfrToken.IsLessThan))
		}

		if filter.CsfrToken.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("csfr_token <= ?", *filter.CsfrToken.IsLessThanOrEqual))
		}

		if filter.CsfrToken.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("csfr_token > ?", *filter.CsfrToken.IsGreaterThan))
		}

		if filter.CsfrToken.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("csfr_token >= ?", *filter.CsfrToken.IsGreaterThanOrEqual))
		}
	}
	if filter.UserAgent != nil {
		if filter.UserAgent.Equals != nil {
			queryMods = append(queryMods, qm.Where("user_agent = ?", *filter.UserAgent.Equals))
		}

		if filter.UserAgent.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("user_agent != ?", *filter.UserAgent.NotEquals))
		}

		if filter.UserAgent.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("user_agent IN ?", *filter.UserAgent.IsIn))
		}

		if filter.UserAgent.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("user_agent NOT IN ?", *filter.UserAgent.IsNotIn))
		}

		if filter.UserAgent.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("user_agent < ?", *filter.UserAgent.IsLessThan))
		}

		if filter.UserAgent.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("user_agent <= ?", *filter.UserAgent.IsLessThanOrEqual))
		}

		if filter.UserAgent.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("user_agent > ?", *filter.UserAgent.IsGreaterThan))
		}

		if filter.UserAgent.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("user_agent >= ?", *filter.UserAgent.IsGreaterThanOrEqual))
		}
	}
	if filter.AppId != nil {
		if filter.AppId.Equals != nil {
			queryMods = append(queryMods, qm.Where("app_id = ?", *filter.AppId.Equals))
		}

		if filter.AppId.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("app_id != ?", *filter.AppId.NotEquals))
		}

		if filter.AppId.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("app_id IN ?", *filter.AppId.IsIn))
		}

		if filter.AppId.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("app_id NOT IN ?", *filter.AppId.IsNotIn))
		}

		if filter.AppId.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("app_id < ?", *filter.AppId.IsLessThan))
		}

		if filter.AppId.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("app_id <= ?", *filter.AppId.IsLessThanOrEqual))
		}

		if filter.AppId.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("app_id > ?", *filter.AppId.IsGreaterThan))
		}

		if filter.AppId.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("app_id >= ?", *filter.AppId.IsGreaterThanOrEqual))
		}
	}
	if filter.Cookie != nil {
		if filter.Cookie.Equals != nil {
			queryMods = append(queryMods, qm.Where("cookie = ?", *filter.Cookie.Equals))
		}

		if filter.Cookie.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("cookie != ?", *filter.Cookie.NotEquals))
		}

		if filter.Cookie.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("cookie IN ?", *filter.Cookie.IsIn))
		}

		if filter.Cookie.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("cookie NOT IN ?", *filter.Cookie.IsNotIn))
		}

		if filter.Cookie.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("cookie < ?", *filter.Cookie.IsLessThan))
		}

		if filter.Cookie.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("cookie <= ?", *filter.Cookie.IsLessThanOrEqual))
		}

		if filter.Cookie.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("cookie > ?", *filter.Cookie.IsGreaterThan))
		}

		if filter.Cookie.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("cookie >= ?", *filter.Cookie.IsGreaterThanOrEqual))
		}
	}
	if filter.InstagramId != nil {
		if filter.InstagramId.Equals != nil {
			queryMods = append(queryMods, qm.Where("instagram_id = ?", *filter.InstagramId.Equals))
		}

		if filter.InstagramId.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("instagram_id != ?", *filter.InstagramId.NotEquals))
		}

		if filter.InstagramId.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("instagram_id IN ?", *filter.InstagramId.IsIn))
		}

		if filter.InstagramId.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("instagram_id NOT IN ?", *filter.InstagramId.IsNotIn))
		}

		if filter.InstagramId.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("instagram_id < ?", *filter.InstagramId.IsLessThan))
		}

		if filter.InstagramId.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("instagram_id <= ?", *filter.InstagramId.IsLessThanOrEqual))
		}

		if filter.InstagramId.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("instagram_id > ?", *filter.InstagramId.IsGreaterThan))
		}

		if filter.InstagramId.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("instagram_id >= ?", *filter.InstagramId.IsGreaterThanOrEqual))
		}
	}
	if filter.CreatedAt != nil {
		if filter.CreatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("created_at = ?", *filter.CreatedAt.Equals))
		}

		if filter.CreatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("created_at != ?", *filter.CreatedAt.NotEquals))
		}

		if filter.CreatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at IN ?", *filter.CreatedAt.IsIn))
		}

		if filter.CreatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at NOT IN ?", *filter.CreatedAt.IsNotIn))
		}

		if filter.CreatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("created_at < ?", *filter.CreatedAt.IsLessThan))
		}

		if filter.CreatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at <= ?", *filter.CreatedAt.IsLessThanOrEqual))
		}

		if filter.CreatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("created_at > ?", *filter.CreatedAt.IsGreaterThan))
		}

		if filter.CreatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at >= ?", *filter.CreatedAt.IsGreaterThanOrEqual))
		}
	}
	if filter.UpdatedAt != nil {
		if filter.UpdatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("updated_at = ?", *filter.UpdatedAt.Equals))
		}

		if filter.UpdatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("updated_at != ?", *filter.UpdatedAt.NotEquals))
		}

		if filter.UpdatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at IN ?", *filter.UpdatedAt.IsIn))
		}

		if filter.UpdatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at NOT IN ?", *filter.UpdatedAt.IsNotIn))
		}

		if filter.UpdatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at < ?", *filter.UpdatedAt.IsLessThan))
		}

		if filter.UpdatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at <= ?", *filter.UpdatedAt.IsLessThanOrEqual))
		}

		if filter.UpdatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at > ?", *filter.UpdatedAt.IsGreaterThan))
		}

		if filter.UpdatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at >= ?", *filter.UpdatedAt.IsGreaterThanOrEqual))
		}
	}

	return queryMods, nil
}

type JobFilter struct {
	Id        *FilterValue `json:"id"`
	Type      *FilterValue `json:"type"`
	CreatedAt *FilterValue `json:"createdAt"`
	UpdatedAt *FilterValue `json:"updatedAt"`
}

func parseJobFilter(filter string) (*JobFilter, error) {
	var filterValue JobFilter
	if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
		return nil, err
	}

	return &filterValue, nil
}

func parseJobFilterToMods(filter *JobFilter) ([]qm.QueryMod, error) {
	var queryMods []qm.QueryMod

	if filter.Id != nil {
		if filter.Id.Equals != nil {
			queryMods = append(queryMods, qm.Where("id = ?", *filter.Id.Equals))
		}

		if filter.Id.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("id != ?", *filter.Id.NotEquals))
		}

		if filter.Id.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id IN ?", *filter.Id.IsIn))
		}

		if filter.Id.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id NOT IN ?", *filter.Id.IsNotIn))
		}

		if filter.Id.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("id < ?", *filter.Id.IsLessThan))
		}

		if filter.Id.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id <= ?", *filter.Id.IsLessThanOrEqual))
		}

		if filter.Id.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("id > ?", *filter.Id.IsGreaterThan))
		}

		if filter.Id.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id >= ?", *filter.Id.IsGreaterThanOrEqual))
		}
	}
	if filter.Type != nil {
		if filter.Type.Equals != nil {
			queryMods = append(queryMods, qm.Where("type = ?", *filter.Type.Equals))
		}

		if filter.Type.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("type != ?", *filter.Type.NotEquals))
		}

		if filter.Type.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("type IN ?", *filter.Type.IsIn))
		}

		if filter.Type.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("type NOT IN ?", *filter.Type.IsNotIn))
		}

		if filter.Type.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("type < ?", *filter.Type.IsLessThan))
		}

		if filter.Type.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("type <= ?", *filter.Type.IsLessThanOrEqual))
		}

		if filter.Type.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("type > ?", *filter.Type.IsGreaterThan))
		}

		if filter.Type.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("type >= ?", *filter.Type.IsGreaterThanOrEqual))
		}
	}
	if filter.CreatedAt != nil {
		if filter.CreatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("created_at = ?", *filter.CreatedAt.Equals))
		}

		if filter.CreatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("created_at != ?", *filter.CreatedAt.NotEquals))
		}

		if filter.CreatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at IN ?", *filter.CreatedAt.IsIn))
		}

		if filter.CreatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at NOT IN ?", *filter.CreatedAt.IsNotIn))
		}

		if filter.CreatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("created_at < ?", *filter.CreatedAt.IsLessThan))
		}

		if filter.CreatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at <= ?", *filter.CreatedAt.IsLessThanOrEqual))
		}

		if filter.CreatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("created_at > ?", *filter.CreatedAt.IsGreaterThan))
		}

		if filter.CreatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at >= ?", *filter.CreatedAt.IsGreaterThanOrEqual))
		}
	}
	if filter.UpdatedAt != nil {
		if filter.UpdatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("updated_at = ?", *filter.UpdatedAt.Equals))
		}

		if filter.UpdatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("updated_at != ?", *filter.UpdatedAt.NotEquals))
		}

		if filter.UpdatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at IN ?", *filter.UpdatedAt.IsIn))
		}

		if filter.UpdatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at NOT IN ?", *filter.UpdatedAt.IsNotIn))
		}

		if filter.UpdatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at < ?", *filter.UpdatedAt.IsLessThan))
		}

		if filter.UpdatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at <= ?", *filter.UpdatedAt.IsLessThanOrEqual))
		}

		if filter.UpdatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at > ?", *filter.UpdatedAt.IsGreaterThan))
		}

		if filter.UpdatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at >= ?", *filter.UpdatedAt.IsGreaterThanOrEqual))
		}
	}

	return queryMods, nil
}

type InstagramAccountFilter struct {
	Id                         *FilterValue `json:"id"`
	Username                   *FilterValue `json:"username"`
	Password                   *FilterValue `json:"password"`
	Country                    *FilterValue `json:"country"`
	Active                     *FilterValue `json:"active"`
	TotalActionsDone           *FilterValue `json:"totalActionsDone"`
	NeedsToBeChecked           *FilterValue `json:"needsToBeChecked"`
	LoginFailed                *FilterValue `json:"loginFailed"`
	IsSetup                    *FilterValue `json:"isSetup"`
	SetupTargetAccountUsername *FilterValue `json:"setupTargetAccountUsername"`
	Proxy                      *FilterValue `json:"proxy"`
	Credential                 *FilterValue `json:"credential"`
	Account                    *FilterValue `json:"account"`
	Job                        *FilterValue `json:"job"`
	CreatedAt                  *FilterValue `json:"createdAt"`
	UpdatedAt                  *FilterValue `json:"updatedAt"`
}

func parseInstagramAccountFilter(filter string) (*InstagramAccountFilter, error) {
	var filterValue InstagramAccountFilter
	if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
		return nil, err
	}

	return &filterValue, nil
}

func parseInstagramAccountFilterToMods(filter *InstagramAccountFilter) ([]qm.QueryMod, error) {
	var queryMods []qm.QueryMod

	if filter.Id != nil {
		if filter.Id.Equals != nil {
			queryMods = append(queryMods, qm.Where("id = ?", *filter.Id.Equals))
		}

		if filter.Id.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("id != ?", *filter.Id.NotEquals))
		}

		if filter.Id.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id IN ?", *filter.Id.IsIn))
		}

		if filter.Id.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id NOT IN ?", *filter.Id.IsNotIn))
		}

		if filter.Id.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("id < ?", *filter.Id.IsLessThan))
		}

		if filter.Id.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id <= ?", *filter.Id.IsLessThanOrEqual))
		}

		if filter.Id.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("id > ?", *filter.Id.IsGreaterThan))
		}

		if filter.Id.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id >= ?", *filter.Id.IsGreaterThanOrEqual))
		}
	}
	if filter.Username != nil {
		if filter.Username.Equals != nil {
			queryMods = append(queryMods, qm.Where("username = ?", *filter.Username.Equals))
		}

		if filter.Username.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("username != ?", *filter.Username.NotEquals))
		}

		if filter.Username.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username IN ?", *filter.Username.IsIn))
		}

		if filter.Username.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username NOT IN ?", *filter.Username.IsNotIn))
		}

		if filter.Username.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("username < ?", *filter.Username.IsLessThan))
		}

		if filter.Username.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username <= ?", *filter.Username.IsLessThanOrEqual))
		}

		if filter.Username.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("username > ?", *filter.Username.IsGreaterThan))
		}

		if filter.Username.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username >= ?", *filter.Username.IsGreaterThanOrEqual))
		}
	}
	if filter.Password != nil {
		if filter.Password.Equals != nil {
			queryMods = append(queryMods, qm.Where("password = ?", *filter.Password.Equals))
		}

		if filter.Password.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("password != ?", *filter.Password.NotEquals))
		}

		if filter.Password.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("password IN ?", *filter.Password.IsIn))
		}

		if filter.Password.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("password NOT IN ?", *filter.Password.IsNotIn))
		}

		if filter.Password.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("password < ?", *filter.Password.IsLessThan))
		}

		if filter.Password.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("password <= ?", *filter.Password.IsLessThanOrEqual))
		}

		if filter.Password.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("password > ?", *filter.Password.IsGreaterThan))
		}

		if filter.Password.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("password >= ?", *filter.Password.IsGreaterThanOrEqual))
		}
	}
	if filter.Country != nil {
		if filter.Country.Equals != nil {
			queryMods = append(queryMods, qm.Where("country = ?", *filter.Country.Equals))
		}

		if filter.Country.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("country != ?", *filter.Country.NotEquals))
		}

		if filter.Country.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("country IN ?", *filter.Country.IsIn))
		}

		if filter.Country.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("country NOT IN ?", *filter.Country.IsNotIn))
		}

		if filter.Country.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("country < ?", *filter.Country.IsLessThan))
		}

		if filter.Country.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("country <= ?", *filter.Country.IsLessThanOrEqual))
		}

		if filter.Country.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("country > ?", *filter.Country.IsGreaterThan))
		}

		if filter.Country.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("country >= ?", *filter.Country.IsGreaterThanOrEqual))
		}
	}
	if filter.Active != nil {
		if filter.Active.Equals != nil {
			queryMods = append(queryMods, qm.Where("active = ?", *filter.Active.Equals))
		}

		if filter.Active.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("active != ?", *filter.Active.NotEquals))
		}

		if filter.Active.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("active IN ?", *filter.Active.IsIn))
		}

		if filter.Active.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("active NOT IN ?", *filter.Active.IsNotIn))
		}

		if filter.Active.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("active < ?", *filter.Active.IsLessThan))
		}

		if filter.Active.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("active <= ?", *filter.Active.IsLessThanOrEqual))
		}

		if filter.Active.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("active > ?", *filter.Active.IsGreaterThan))
		}

		if filter.Active.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("active >= ?", *filter.Active.IsGreaterThanOrEqual))
		}
	}
	if filter.TotalActionsDone != nil {
		if filter.TotalActionsDone.Equals != nil {
			queryMods = append(queryMods, qm.Where("total_actions_done = ?", *filter.TotalActionsDone.Equals))
		}

		if filter.TotalActionsDone.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("total_actions_done != ?", *filter.TotalActionsDone.NotEquals))
		}

		if filter.TotalActionsDone.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("total_actions_done IN ?", *filter.TotalActionsDone.IsIn))
		}

		if filter.TotalActionsDone.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("total_actions_done NOT IN ?", *filter.TotalActionsDone.IsNotIn))
		}

		if filter.TotalActionsDone.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("total_actions_done < ?", *filter.TotalActionsDone.IsLessThan))
		}

		if filter.TotalActionsDone.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("total_actions_done <= ?", *filter.TotalActionsDone.IsLessThanOrEqual))
		}

		if filter.TotalActionsDone.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("total_actions_done > ?", *filter.TotalActionsDone.IsGreaterThan))
		}

		if filter.TotalActionsDone.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("total_actions_done >= ?", *filter.TotalActionsDone.IsGreaterThanOrEqual))
		}
	}
	if filter.NeedsToBeChecked != nil {
		if filter.NeedsToBeChecked.Equals != nil {
			queryMods = append(queryMods, qm.Where("needs_to_be_checked = ?", *filter.NeedsToBeChecked.Equals))
		}

		if filter.NeedsToBeChecked.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("needs_to_be_checked != ?", *filter.NeedsToBeChecked.NotEquals))
		}

		if filter.NeedsToBeChecked.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("needs_to_be_checked IN ?", *filter.NeedsToBeChecked.IsIn))
		}

		if filter.NeedsToBeChecked.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("needs_to_be_checked NOT IN ?", *filter.NeedsToBeChecked.IsNotIn))
		}

		if filter.NeedsToBeChecked.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("needs_to_be_checked < ?", *filter.NeedsToBeChecked.IsLessThan))
		}

		if filter.NeedsToBeChecked.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("needs_to_be_checked <= ?", *filter.NeedsToBeChecked.IsLessThanOrEqual))
		}

		if filter.NeedsToBeChecked.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("needs_to_be_checked > ?", *filter.NeedsToBeChecked.IsGreaterThan))
		}

		if filter.NeedsToBeChecked.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("needs_to_be_checked >= ?", *filter.NeedsToBeChecked.IsGreaterThanOrEqual))
		}
	}
	if filter.LoginFailed != nil {
		if filter.LoginFailed.Equals != nil {
			queryMods = append(queryMods, qm.Where("login_failed = ?", *filter.LoginFailed.Equals))
		}

		if filter.LoginFailed.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("login_failed != ?", *filter.LoginFailed.NotEquals))
		}

		if filter.LoginFailed.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("login_failed IN ?", *filter.LoginFailed.IsIn))
		}

		if filter.LoginFailed.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("login_failed NOT IN ?", *filter.LoginFailed.IsNotIn))
		}

		if filter.LoginFailed.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("login_failed < ?", *filter.LoginFailed.IsLessThan))
		}

		if filter.LoginFailed.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("login_failed <= ?", *filter.LoginFailed.IsLessThanOrEqual))
		}

		if filter.LoginFailed.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("login_failed > ?", *filter.LoginFailed.IsGreaterThan))
		}

		if filter.LoginFailed.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("login_failed >= ?", *filter.LoginFailed.IsGreaterThanOrEqual))
		}
	}
	if filter.IsSetup != nil {
		if filter.IsSetup.Equals != nil {
			queryMods = append(queryMods, qm.Where("is_setup = ?", *filter.IsSetup.Equals))
		}

		if filter.IsSetup.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("is_setup != ?", *filter.IsSetup.NotEquals))
		}

		if filter.IsSetup.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_setup IN ?", *filter.IsSetup.IsIn))
		}

		if filter.IsSetup.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_setup NOT IN ?", *filter.IsSetup.IsNotIn))
		}

		if filter.IsSetup.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("is_setup < ?", *filter.IsSetup.IsLessThan))
		}

		if filter.IsSetup.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_setup <= ?", *filter.IsSetup.IsLessThanOrEqual))
		}

		if filter.IsSetup.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("is_setup > ?", *filter.IsSetup.IsGreaterThan))
		}

		if filter.IsSetup.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_setup >= ?", *filter.IsSetup.IsGreaterThanOrEqual))
		}
	}
	if filter.SetupTargetAccountUsername != nil {
		if filter.SetupTargetAccountUsername.Equals != nil {
			queryMods = append(queryMods, qm.Where("setup_target_account_username = ?", *filter.SetupTargetAccountUsername.Equals))
		}

		if filter.SetupTargetAccountUsername.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("setup_target_account_username != ?", *filter.SetupTargetAccountUsername.NotEquals))
		}

		if filter.SetupTargetAccountUsername.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("setup_target_account_username IN ?", *filter.SetupTargetAccountUsername.IsIn))
		}

		if filter.SetupTargetAccountUsername.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("setup_target_account_username NOT IN ?", *filter.SetupTargetAccountUsername.IsNotIn))
		}

		if filter.SetupTargetAccountUsername.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("setup_target_account_username < ?", *filter.SetupTargetAccountUsername.IsLessThan))
		}

		if filter.SetupTargetAccountUsername.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("setup_target_account_username <= ?", *filter.SetupTargetAccountUsername.IsLessThanOrEqual))
		}

		if filter.SetupTargetAccountUsername.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("setup_target_account_username > ?", *filter.SetupTargetAccountUsername.IsGreaterThan))
		}

		if filter.SetupTargetAccountUsername.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("setup_target_account_username >= ?", *filter.SetupTargetAccountUsername.IsGreaterThanOrEqual))
		}
	}
	if filter.Proxy != nil {
		if filter.Proxy.Equals != nil {
			queryMods = append(queryMods, qm.Where("proxy = ?", *filter.Proxy.Equals))
		}

		if filter.Proxy.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("proxy != ?", *filter.Proxy.NotEquals))
		}

		if filter.Proxy.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("proxy IN ?", *filter.Proxy.IsIn))
		}

		if filter.Proxy.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("proxy NOT IN ?", *filter.Proxy.IsNotIn))
		}

		if filter.Proxy.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("proxy < ?", *filter.Proxy.IsLessThan))
		}

		if filter.Proxy.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("proxy <= ?", *filter.Proxy.IsLessThanOrEqual))
		}

		if filter.Proxy.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("proxy > ?", *filter.Proxy.IsGreaterThan))
		}

		if filter.Proxy.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("proxy >= ?", *filter.Proxy.IsGreaterThanOrEqual))
		}
	}
	if filter.Credential != nil {
		if filter.Credential.Equals != nil {
			queryMods = append(queryMods, qm.Where("credential = ?", *filter.Credential.Equals))
		}

		if filter.Credential.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("credential != ?", *filter.Credential.NotEquals))
		}

		if filter.Credential.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("credential IN ?", *filter.Credential.IsIn))
		}

		if filter.Credential.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("credential NOT IN ?", *filter.Credential.IsNotIn))
		}

		if filter.Credential.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("credential < ?", *filter.Credential.IsLessThan))
		}

		if filter.Credential.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("credential <= ?", *filter.Credential.IsLessThanOrEqual))
		}

		if filter.Credential.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("credential > ?", *filter.Credential.IsGreaterThan))
		}

		if filter.Credential.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("credential >= ?", *filter.Credential.IsGreaterThanOrEqual))
		}
	}
	if filter.Account != nil {
		if filter.Account.Equals != nil {
			queryMods = append(queryMods, qm.Where("account = ?", *filter.Account.Equals))
		}

		if filter.Account.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("account != ?", *filter.Account.NotEquals))
		}

		if filter.Account.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account IN ?", *filter.Account.IsIn))
		}

		if filter.Account.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account NOT IN ?", *filter.Account.IsNotIn))
		}

		if filter.Account.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("account < ?", *filter.Account.IsLessThan))
		}

		if filter.Account.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account <= ?", *filter.Account.IsLessThanOrEqual))
		}

		if filter.Account.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("account > ?", *filter.Account.IsGreaterThan))
		}

		if filter.Account.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account >= ?", *filter.Account.IsGreaterThanOrEqual))
		}
	}
	if filter.Job != nil {
		if filter.Job.Equals != nil {
			queryMods = append(queryMods, qm.Where("job = ?", *filter.Job.Equals))
		}

		if filter.Job.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("job != ?", *filter.Job.NotEquals))
		}

		if filter.Job.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("job IN ?", *filter.Job.IsIn))
		}

		if filter.Job.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("job NOT IN ?", *filter.Job.IsNotIn))
		}

		if filter.Job.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("job < ?", *filter.Job.IsLessThan))
		}

		if filter.Job.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("job <= ?", *filter.Job.IsLessThanOrEqual))
		}

		if filter.Job.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("job > ?", *filter.Job.IsGreaterThan))
		}

		if filter.Job.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("job >= ?", *filter.Job.IsGreaterThanOrEqual))
		}
	}
	if filter.CreatedAt != nil {
		if filter.CreatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("created_at = ?", *filter.CreatedAt.Equals))
		}

		if filter.CreatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("created_at != ?", *filter.CreatedAt.NotEquals))
		}

		if filter.CreatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at IN ?", *filter.CreatedAt.IsIn))
		}

		if filter.CreatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at NOT IN ?", *filter.CreatedAt.IsNotIn))
		}

		if filter.CreatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("created_at < ?", *filter.CreatedAt.IsLessThan))
		}

		if filter.CreatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at <= ?", *filter.CreatedAt.IsLessThanOrEqual))
		}

		if filter.CreatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("created_at > ?", *filter.CreatedAt.IsGreaterThan))
		}

		if filter.CreatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at >= ?", *filter.CreatedAt.IsGreaterThanOrEqual))
		}
	}
	if filter.UpdatedAt != nil {
		if filter.UpdatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("updated_at = ?", *filter.UpdatedAt.Equals))
		}

		if filter.UpdatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("updated_at != ?", *filter.UpdatedAt.NotEquals))
		}

		if filter.UpdatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at IN ?", *filter.UpdatedAt.IsIn))
		}

		if filter.UpdatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at NOT IN ?", *filter.UpdatedAt.IsNotIn))
		}

		if filter.UpdatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at < ?", *filter.UpdatedAt.IsLessThan))
		}

		if filter.UpdatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at <= ?", *filter.UpdatedAt.IsLessThanOrEqual))
		}

		if filter.UpdatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at > ?", *filter.UpdatedAt.IsGreaterThan))
		}

		if filter.UpdatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at >= ?", *filter.UpdatedAt.IsGreaterThanOrEqual))
		}
	}

	return queryMods, nil
}

type ScrapedInstagramAccountFilter struct {
	Id                    *FilterValue `json:"id"`
	InstagramId           *FilterValue `json:"instagramId"`
	Username              *FilterValue `json:"username"`
	FullName              *FilterValue `json:"fullName"`
	Biography             *FilterValue `json:"biography"`
	FacebookId            *FilterValue `json:"facebookId"`
	IsVerified            *FilterValue `json:"isVerified"`
	IsPrivate             *FilterValue `json:"isPrivate"`
	ProfilePictureUrl     *FilterValue `json:"profilePictureUrl"`
	ExternalUrl           *FilterValue `json:"externalUrl"`
	BusinessCategoryName  *FilterValue `json:"businessCategoryName"`
	CategoryName          *FilterValue `json:"categoryName"`
	IsBusinessAccount     *FilterValue `json:"isBusinessAccount"`
	IsProfessionalAccount *FilterValue `json:"isProfessionalAccount"`
	FollowedByCount       *FilterValue `json:"followedByCount"`
	FollowCount           *FilterValue `json:"followCount"`
	MediaCount            *FilterValue `json:"mediaCount"`
	HighlightCount        *FilterValue `json:"highlightCount"`
	HasReels              *FilterValue `json:"hasReels"`
	ExtractedEmail        *FilterValue `json:"extractedEmail"`
	HasManagement         *FilterValue `json:"hasManagement"`
	Account               *FilterValue `json:"account"`
	CreatedAt             *FilterValue `json:"createdAt"`
	UpdatedAt             *FilterValue `json:"updatedAt"`
}

func parseScrapedInstagramAccountFilter(filter string) (*ScrapedInstagramAccountFilter, error) {
	var filterValue ScrapedInstagramAccountFilter
	if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
		return nil, err
	}

	return &filterValue, nil
}

func parseScrapedInstagramAccountFilterToMods(filter *ScrapedInstagramAccountFilter) ([]qm.QueryMod, error) {
	var queryMods []qm.QueryMod

	if filter.Id != nil {
		if filter.Id.Equals != nil {
			queryMods = append(queryMods, qm.Where("id = ?", *filter.Id.Equals))
		}

		if filter.Id.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("id != ?", *filter.Id.NotEquals))
		}

		if filter.Id.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id IN ?", *filter.Id.IsIn))
		}

		if filter.Id.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id NOT IN ?", *filter.Id.IsNotIn))
		}

		if filter.Id.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("id < ?", *filter.Id.IsLessThan))
		}

		if filter.Id.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id <= ?", *filter.Id.IsLessThanOrEqual))
		}

		if filter.Id.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("id > ?", *filter.Id.IsGreaterThan))
		}

		if filter.Id.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id >= ?", *filter.Id.IsGreaterThanOrEqual))
		}
	}
	if filter.InstagramId != nil {
		if filter.InstagramId.Equals != nil {
			queryMods = append(queryMods, qm.Where("instagram_id = ?", *filter.InstagramId.Equals))
		}

		if filter.InstagramId.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("instagram_id != ?", *filter.InstagramId.NotEquals))
		}

		if filter.InstagramId.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("instagram_id IN ?", *filter.InstagramId.IsIn))
		}

		if filter.InstagramId.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("instagram_id NOT IN ?", *filter.InstagramId.IsNotIn))
		}

		if filter.InstagramId.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("instagram_id < ?", *filter.InstagramId.IsLessThan))
		}

		if filter.InstagramId.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("instagram_id <= ?", *filter.InstagramId.IsLessThanOrEqual))
		}

		if filter.InstagramId.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("instagram_id > ?", *filter.InstagramId.IsGreaterThan))
		}

		if filter.InstagramId.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("instagram_id >= ?", *filter.InstagramId.IsGreaterThanOrEqual))
		}
	}
	if filter.Username != nil {
		if filter.Username.Equals != nil {
			queryMods = append(queryMods, qm.Where("username = ?", *filter.Username.Equals))
		}

		if filter.Username.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("username != ?", *filter.Username.NotEquals))
		}

		if filter.Username.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username IN ?", *filter.Username.IsIn))
		}

		if filter.Username.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username NOT IN ?", *filter.Username.IsNotIn))
		}

		if filter.Username.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("username < ?", *filter.Username.IsLessThan))
		}

		if filter.Username.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username <= ?", *filter.Username.IsLessThanOrEqual))
		}

		if filter.Username.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("username > ?", *filter.Username.IsGreaterThan))
		}

		if filter.Username.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username >= ?", *filter.Username.IsGreaterThanOrEqual))
		}
	}
	if filter.FullName != nil {
		if filter.FullName.Equals != nil {
			queryMods = append(queryMods, qm.Where("full_name = ?", *filter.FullName.Equals))
		}

		if filter.FullName.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("full_name != ?", *filter.FullName.NotEquals))
		}

		if filter.FullName.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("full_name IN ?", *filter.FullName.IsIn))
		}

		if filter.FullName.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("full_name NOT IN ?", *filter.FullName.IsNotIn))
		}

		if filter.FullName.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("full_name < ?", *filter.FullName.IsLessThan))
		}

		if filter.FullName.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("full_name <= ?", *filter.FullName.IsLessThanOrEqual))
		}

		if filter.FullName.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("full_name > ?", *filter.FullName.IsGreaterThan))
		}

		if filter.FullName.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("full_name >= ?", *filter.FullName.IsGreaterThanOrEqual))
		}
	}
	if filter.Biography != nil {
		if filter.Biography.Equals != nil {
			queryMods = append(queryMods, qm.Where("biography = ?", *filter.Biography.Equals))
		}

		if filter.Biography.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("biography != ?", *filter.Biography.NotEquals))
		}

		if filter.Biography.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("biography IN ?", *filter.Biography.IsIn))
		}

		if filter.Biography.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("biography NOT IN ?", *filter.Biography.IsNotIn))
		}

		if filter.Biography.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("biography < ?", *filter.Biography.IsLessThan))
		}

		if filter.Biography.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("biography <= ?", *filter.Biography.IsLessThanOrEqual))
		}

		if filter.Biography.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("biography > ?", *filter.Biography.IsGreaterThan))
		}

		if filter.Biography.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("biography >= ?", *filter.Biography.IsGreaterThanOrEqual))
		}
	}
	if filter.FacebookId != nil {
		if filter.FacebookId.Equals != nil {
			queryMods = append(queryMods, qm.Where("facebook_id = ?", *filter.FacebookId.Equals))
		}

		if filter.FacebookId.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("facebook_id != ?", *filter.FacebookId.NotEquals))
		}

		if filter.FacebookId.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("facebook_id IN ?", *filter.FacebookId.IsIn))
		}

		if filter.FacebookId.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("facebook_id NOT IN ?", *filter.FacebookId.IsNotIn))
		}

		if filter.FacebookId.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("facebook_id < ?", *filter.FacebookId.IsLessThan))
		}

		if filter.FacebookId.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("facebook_id <= ?", *filter.FacebookId.IsLessThanOrEqual))
		}

		if filter.FacebookId.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("facebook_id > ?", *filter.FacebookId.IsGreaterThan))
		}

		if filter.FacebookId.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("facebook_id >= ?", *filter.FacebookId.IsGreaterThanOrEqual))
		}
	}
	if filter.IsVerified != nil {
		if filter.IsVerified.Equals != nil {
			queryMods = append(queryMods, qm.Where("is_verified = ?", *filter.IsVerified.Equals))
		}

		if filter.IsVerified.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("is_verified != ?", *filter.IsVerified.NotEquals))
		}

		if filter.IsVerified.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_verified IN ?", *filter.IsVerified.IsIn))
		}

		if filter.IsVerified.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_verified NOT IN ?", *filter.IsVerified.IsNotIn))
		}

		if filter.IsVerified.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("is_verified < ?", *filter.IsVerified.IsLessThan))
		}

		if filter.IsVerified.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_verified <= ?", *filter.IsVerified.IsLessThanOrEqual))
		}

		if filter.IsVerified.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("is_verified > ?", *filter.IsVerified.IsGreaterThan))
		}

		if filter.IsVerified.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_verified >= ?", *filter.IsVerified.IsGreaterThanOrEqual))
		}
	}
	if filter.IsPrivate != nil {
		if filter.IsPrivate.Equals != nil {
			queryMods = append(queryMods, qm.Where("is_private = ?", *filter.IsPrivate.Equals))
		}

		if filter.IsPrivate.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("is_private != ?", *filter.IsPrivate.NotEquals))
		}

		if filter.IsPrivate.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_private IN ?", *filter.IsPrivate.IsIn))
		}

		if filter.IsPrivate.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_private NOT IN ?", *filter.IsPrivate.IsNotIn))
		}

		if filter.IsPrivate.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("is_private < ?", *filter.IsPrivate.IsLessThan))
		}

		if filter.IsPrivate.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_private <= ?", *filter.IsPrivate.IsLessThanOrEqual))
		}

		if filter.IsPrivate.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("is_private > ?", *filter.IsPrivate.IsGreaterThan))
		}

		if filter.IsPrivate.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_private >= ?", *filter.IsPrivate.IsGreaterThanOrEqual))
		}
	}
	if filter.ProfilePictureUrl != nil {
		if filter.ProfilePictureUrl.Equals != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url = ?", *filter.ProfilePictureUrl.Equals))
		}

		if filter.ProfilePictureUrl.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url != ?", *filter.ProfilePictureUrl.NotEquals))
		}

		if filter.ProfilePictureUrl.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("profile_picture_url IN ?", *filter.ProfilePictureUrl.IsIn))
		}

		if filter.ProfilePictureUrl.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("profile_picture_url NOT IN ?", *filter.ProfilePictureUrl.IsNotIn))
		}

		if filter.ProfilePictureUrl.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url < ?", *filter.ProfilePictureUrl.IsLessThan))
		}

		if filter.ProfilePictureUrl.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url <= ?", *filter.ProfilePictureUrl.IsLessThanOrEqual))
		}

		if filter.ProfilePictureUrl.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url > ?", *filter.ProfilePictureUrl.IsGreaterThan))
		}

		if filter.ProfilePictureUrl.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url >= ?", *filter.ProfilePictureUrl.IsGreaterThanOrEqual))
		}
	}
	if filter.ExternalUrl != nil {
		if filter.ExternalUrl.Equals != nil {
			queryMods = append(queryMods, qm.Where("external_url = ?", *filter.ExternalUrl.Equals))
		}

		if filter.ExternalUrl.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("external_url != ?", *filter.ExternalUrl.NotEquals))
		}

		if filter.ExternalUrl.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("external_url IN ?", *filter.ExternalUrl.IsIn))
		}

		if filter.ExternalUrl.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("external_url NOT IN ?", *filter.ExternalUrl.IsNotIn))
		}

		if filter.ExternalUrl.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("external_url < ?", *filter.ExternalUrl.IsLessThan))
		}

		if filter.ExternalUrl.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("external_url <= ?", *filter.ExternalUrl.IsLessThanOrEqual))
		}

		if filter.ExternalUrl.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("external_url > ?", *filter.ExternalUrl.IsGreaterThan))
		}

		if filter.ExternalUrl.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("external_url >= ?", *filter.ExternalUrl.IsGreaterThanOrEqual))
		}
	}
	if filter.BusinessCategoryName != nil {
		if filter.BusinessCategoryName.Equals != nil {
			queryMods = append(queryMods, qm.Where("business_category_name = ?", *filter.BusinessCategoryName.Equals))
		}

		if filter.BusinessCategoryName.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("business_category_name != ?", *filter.BusinessCategoryName.NotEquals))
		}

		if filter.BusinessCategoryName.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("business_category_name IN ?", *filter.BusinessCategoryName.IsIn))
		}

		if filter.BusinessCategoryName.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("business_category_name NOT IN ?", *filter.BusinessCategoryName.IsNotIn))
		}

		if filter.BusinessCategoryName.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("business_category_name < ?", *filter.BusinessCategoryName.IsLessThan))
		}

		if filter.BusinessCategoryName.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("business_category_name <= ?", *filter.BusinessCategoryName.IsLessThanOrEqual))
		}

		if filter.BusinessCategoryName.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("business_category_name > ?", *filter.BusinessCategoryName.IsGreaterThan))
		}

		if filter.BusinessCategoryName.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("business_category_name >= ?", *filter.BusinessCategoryName.IsGreaterThanOrEqual))
		}
	}
	if filter.CategoryName != nil {
		if filter.CategoryName.Equals != nil {
			queryMods = append(queryMods, qm.Where("category_name = ?", *filter.CategoryName.Equals))
		}

		if filter.CategoryName.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("category_name != ?", *filter.CategoryName.NotEquals))
		}

		if filter.CategoryName.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("category_name IN ?", *filter.CategoryName.IsIn))
		}

		if filter.CategoryName.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("category_name NOT IN ?", *filter.CategoryName.IsNotIn))
		}

		if filter.CategoryName.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("category_name < ?", *filter.CategoryName.IsLessThan))
		}

		if filter.CategoryName.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("category_name <= ?", *filter.CategoryName.IsLessThanOrEqual))
		}

		if filter.CategoryName.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("category_name > ?", *filter.CategoryName.IsGreaterThan))
		}

		if filter.CategoryName.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("category_name >= ?", *filter.CategoryName.IsGreaterThanOrEqual))
		}
	}
	if filter.IsBusinessAccount != nil {
		if filter.IsBusinessAccount.Equals != nil {
			queryMods = append(queryMods, qm.Where("is_business_account = ?", *filter.IsBusinessAccount.Equals))
		}

		if filter.IsBusinessAccount.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("is_business_account != ?", *filter.IsBusinessAccount.NotEquals))
		}

		if filter.IsBusinessAccount.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_business_account IN ?", *filter.IsBusinessAccount.IsIn))
		}

		if filter.IsBusinessAccount.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_business_account NOT IN ?", *filter.IsBusinessAccount.IsNotIn))
		}

		if filter.IsBusinessAccount.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("is_business_account < ?", *filter.IsBusinessAccount.IsLessThan))
		}

		if filter.IsBusinessAccount.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_business_account <= ?", *filter.IsBusinessAccount.IsLessThanOrEqual))
		}

		if filter.IsBusinessAccount.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("is_business_account > ?", *filter.IsBusinessAccount.IsGreaterThan))
		}

		if filter.IsBusinessAccount.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_business_account >= ?", *filter.IsBusinessAccount.IsGreaterThanOrEqual))
		}
	}
	if filter.IsProfessionalAccount != nil {
		if filter.IsProfessionalAccount.Equals != nil {
			queryMods = append(queryMods, qm.Where("is_professional_account = ?", *filter.IsProfessionalAccount.Equals))
		}

		if filter.IsProfessionalAccount.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("is_professional_account != ?", *filter.IsProfessionalAccount.NotEquals))
		}

		if filter.IsProfessionalAccount.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_professional_account IN ?", *filter.IsProfessionalAccount.IsIn))
		}

		if filter.IsProfessionalAccount.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("is_professional_account NOT IN ?", *filter.IsProfessionalAccount.IsNotIn))
		}

		if filter.IsProfessionalAccount.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("is_professional_account < ?", *filter.IsProfessionalAccount.IsLessThan))
		}

		if filter.IsProfessionalAccount.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_professional_account <= ?", *filter.IsProfessionalAccount.IsLessThanOrEqual))
		}

		if filter.IsProfessionalAccount.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("is_professional_account > ?", *filter.IsProfessionalAccount.IsGreaterThan))
		}

		if filter.IsProfessionalAccount.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("is_professional_account >= ?", *filter.IsProfessionalAccount.IsGreaterThanOrEqual))
		}
	}
	if filter.FollowedByCount != nil {
		if filter.FollowedByCount.Equals != nil {
			queryMods = append(queryMods, qm.Where("followed_by_count = ?", *filter.FollowedByCount.Equals))
		}

		if filter.FollowedByCount.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("followed_by_count != ?", *filter.FollowedByCount.NotEquals))
		}

		if filter.FollowedByCount.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("followed_by_count IN ?", *filter.FollowedByCount.IsIn))
		}

		if filter.FollowedByCount.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("followed_by_count NOT IN ?", *filter.FollowedByCount.IsNotIn))
		}

		if filter.FollowedByCount.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("followed_by_count < ?", *filter.FollowedByCount.IsLessThan))
		}

		if filter.FollowedByCount.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("followed_by_count <= ?", *filter.FollowedByCount.IsLessThanOrEqual))
		}

		if filter.FollowedByCount.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("followed_by_count > ?", *filter.FollowedByCount.IsGreaterThan))
		}

		if filter.FollowedByCount.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("followed_by_count >= ?", *filter.FollowedByCount.IsGreaterThanOrEqual))
		}
	}
	if filter.FollowCount != nil {
		if filter.FollowCount.Equals != nil {
			queryMods = append(queryMods, qm.Where("follow_count = ?", *filter.FollowCount.Equals))
		}

		if filter.FollowCount.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("follow_count != ?", *filter.FollowCount.NotEquals))
		}

		if filter.FollowCount.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("follow_count IN ?", *filter.FollowCount.IsIn))
		}

		if filter.FollowCount.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("follow_count NOT IN ?", *filter.FollowCount.IsNotIn))
		}

		if filter.FollowCount.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("follow_count < ?", *filter.FollowCount.IsLessThan))
		}

		if filter.FollowCount.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("follow_count <= ?", *filter.FollowCount.IsLessThanOrEqual))
		}

		if filter.FollowCount.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("follow_count > ?", *filter.FollowCount.IsGreaterThan))
		}

		if filter.FollowCount.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("follow_count >= ?", *filter.FollowCount.IsGreaterThanOrEqual))
		}
	}
	if filter.MediaCount != nil {
		if filter.MediaCount.Equals != nil {
			queryMods = append(queryMods, qm.Where("media_count = ?", *filter.MediaCount.Equals))
		}

		if filter.MediaCount.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("media_count != ?", *filter.MediaCount.NotEquals))
		}

		if filter.MediaCount.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("media_count IN ?", *filter.MediaCount.IsIn))
		}

		if filter.MediaCount.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("media_count NOT IN ?", *filter.MediaCount.IsNotIn))
		}

		if filter.MediaCount.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("media_count < ?", *filter.MediaCount.IsLessThan))
		}

		if filter.MediaCount.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("media_count <= ?", *filter.MediaCount.IsLessThanOrEqual))
		}

		if filter.MediaCount.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("media_count > ?", *filter.MediaCount.IsGreaterThan))
		}

		if filter.MediaCount.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("media_count >= ?", *filter.MediaCount.IsGreaterThanOrEqual))
		}
	}
	if filter.HighlightCount != nil {
		if filter.HighlightCount.Equals != nil {
			queryMods = append(queryMods, qm.Where("highlight_count = ?", *filter.HighlightCount.Equals))
		}

		if filter.HighlightCount.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("highlight_count != ?", *filter.HighlightCount.NotEquals))
		}

		if filter.HighlightCount.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("highlight_count IN ?", *filter.HighlightCount.IsIn))
		}

		if filter.HighlightCount.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("highlight_count NOT IN ?", *filter.HighlightCount.IsNotIn))
		}

		if filter.HighlightCount.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("highlight_count < ?", *filter.HighlightCount.IsLessThan))
		}

		if filter.HighlightCount.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("highlight_count <= ?", *filter.HighlightCount.IsLessThanOrEqual))
		}

		if filter.HighlightCount.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("highlight_count > ?", *filter.HighlightCount.IsGreaterThan))
		}

		if filter.HighlightCount.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("highlight_count >= ?", *filter.HighlightCount.IsGreaterThanOrEqual))
		}
	}
	if filter.HasReels != nil {
		if filter.HasReels.Equals != nil {
			queryMods = append(queryMods, qm.Where("has_reels = ?", *filter.HasReels.Equals))
		}

		if filter.HasReels.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("has_reels != ?", *filter.HasReels.NotEquals))
		}

		if filter.HasReels.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("has_reels IN ?", *filter.HasReels.IsIn))
		}

		if filter.HasReels.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("has_reels NOT IN ?", *filter.HasReels.IsNotIn))
		}

		if filter.HasReels.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("has_reels < ?", *filter.HasReels.IsLessThan))
		}

		if filter.HasReels.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("has_reels <= ?", *filter.HasReels.IsLessThanOrEqual))
		}

		if filter.HasReels.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("has_reels > ?", *filter.HasReels.IsGreaterThan))
		}

		if filter.HasReels.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("has_reels >= ?", *filter.HasReels.IsGreaterThanOrEqual))
		}
	}
	if filter.ExtractedEmail != nil {
		if filter.ExtractedEmail.Equals != nil {
			queryMods = append(queryMods, qm.Where("extracted_email = ?", *filter.ExtractedEmail.Equals))
		}

		if filter.ExtractedEmail.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("extracted_email != ?", *filter.ExtractedEmail.NotEquals))
		}

		if filter.ExtractedEmail.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("extracted_email IN ?", *filter.ExtractedEmail.IsIn))
		}

		if filter.ExtractedEmail.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("extracted_email NOT IN ?", *filter.ExtractedEmail.IsNotIn))
		}

		if filter.ExtractedEmail.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("extracted_email < ?", *filter.ExtractedEmail.IsLessThan))
		}

		if filter.ExtractedEmail.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("extracted_email <= ?", *filter.ExtractedEmail.IsLessThanOrEqual))
		}

		if filter.ExtractedEmail.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("extracted_email > ?", *filter.ExtractedEmail.IsGreaterThan))
		}

		if filter.ExtractedEmail.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("extracted_email >= ?", *filter.ExtractedEmail.IsGreaterThanOrEqual))
		}
	}
	if filter.HasManagement != nil {
		if filter.HasManagement.Equals != nil {
			queryMods = append(queryMods, qm.Where("has_management = ?", *filter.HasManagement.Equals))
		}

		if filter.HasManagement.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("has_management != ?", *filter.HasManagement.NotEquals))
		}

		if filter.HasManagement.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("has_management IN ?", *filter.HasManagement.IsIn))
		}

		if filter.HasManagement.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("has_management NOT IN ?", *filter.HasManagement.IsNotIn))
		}

		if filter.HasManagement.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("has_management < ?", *filter.HasManagement.IsLessThan))
		}

		if filter.HasManagement.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("has_management <= ?", *filter.HasManagement.IsLessThanOrEqual))
		}

		if filter.HasManagement.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("has_management > ?", *filter.HasManagement.IsGreaterThan))
		}

		if filter.HasManagement.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("has_management >= ?", *filter.HasManagement.IsGreaterThanOrEqual))
		}
	}
	if filter.Account != nil {
		if filter.Account.Equals != nil {
			queryMods = append(queryMods, qm.Where("account = ?", *filter.Account.Equals))
		}

		if filter.Account.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("account != ?", *filter.Account.NotEquals))
		}

		if filter.Account.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account IN ?", *filter.Account.IsIn))
		}

		if filter.Account.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account NOT IN ?", *filter.Account.IsNotIn))
		}

		if filter.Account.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("account < ?", *filter.Account.IsLessThan))
		}

		if filter.Account.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account <= ?", *filter.Account.IsLessThanOrEqual))
		}

		if filter.Account.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("account > ?", *filter.Account.IsGreaterThan))
		}

		if filter.Account.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account >= ?", *filter.Account.IsGreaterThanOrEqual))
		}
	}
	if filter.CreatedAt != nil {
		if filter.CreatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("created_at = ?", *filter.CreatedAt.Equals))
		}

		if filter.CreatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("created_at != ?", *filter.CreatedAt.NotEquals))
		}

		if filter.CreatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at IN ?", *filter.CreatedAt.IsIn))
		}

		if filter.CreatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at NOT IN ?", *filter.CreatedAt.IsNotIn))
		}

		if filter.CreatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("created_at < ?", *filter.CreatedAt.IsLessThan))
		}

		if filter.CreatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at <= ?", *filter.CreatedAt.IsLessThanOrEqual))
		}

		if filter.CreatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("created_at > ?", *filter.CreatedAt.IsGreaterThan))
		}

		if filter.CreatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at >= ?", *filter.CreatedAt.IsGreaterThanOrEqual))
		}
	}
	if filter.UpdatedAt != nil {
		if filter.UpdatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("updated_at = ?", *filter.UpdatedAt.Equals))
		}

		if filter.UpdatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("updated_at != ?", *filter.UpdatedAt.NotEquals))
		}

		if filter.UpdatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at IN ?", *filter.UpdatedAt.IsIn))
		}

		if filter.UpdatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at NOT IN ?", *filter.UpdatedAt.IsNotIn))
		}

		if filter.UpdatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at < ?", *filter.UpdatedAt.IsLessThan))
		}

		if filter.UpdatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at <= ?", *filter.UpdatedAt.IsLessThanOrEqual))
		}

		if filter.UpdatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at > ?", *filter.UpdatedAt.IsGreaterThan))
		}

		if filter.UpdatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at >= ?", *filter.UpdatedAt.IsGreaterThanOrEqual))
		}
	}

	return queryMods, nil
}

type ScrapedInstagramAccountChainedFilter struct {
	Id                      *FilterValue `json:"id"`
	InstagramId             *FilterValue `json:"instagramId"`
	Username                *FilterValue `json:"username"`
	FullName                *FilterValue `json:"fullName"`
	ProfilePictureUrl       *FilterValue `json:"profilePictureUrl"`
	ScrapedInstagramAccount *FilterValue `json:"scrapedInstagramAccount"`
	Account                 *FilterValue `json:"account"`
	CreatedAt               *FilterValue `json:"createdAt"`
	UpdatedAt               *FilterValue `json:"updatedAt"`
}

func parseScrapedInstagramAccountChainedFilter(filter string) (*ScrapedInstagramAccountChainedFilter, error) {
	var filterValue ScrapedInstagramAccountChainedFilter
	if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
		return nil, err
	}

	return &filterValue, nil
}

func parseScrapedInstagramAccountChainedFilterToMods(filter *ScrapedInstagramAccountChainedFilter) ([]qm.QueryMod, error) {
	var queryMods []qm.QueryMod

	if filter.Id != nil {
		if filter.Id.Equals != nil {
			queryMods = append(queryMods, qm.Where("id = ?", *filter.Id.Equals))
		}

		if filter.Id.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("id != ?", *filter.Id.NotEquals))
		}

		if filter.Id.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id IN ?", *filter.Id.IsIn))
		}

		if filter.Id.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("id NOT IN ?", *filter.Id.IsNotIn))
		}

		if filter.Id.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("id < ?", *filter.Id.IsLessThan))
		}

		if filter.Id.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id <= ?", *filter.Id.IsLessThanOrEqual))
		}

		if filter.Id.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("id > ?", *filter.Id.IsGreaterThan))
		}

		if filter.Id.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("id >= ?", *filter.Id.IsGreaterThanOrEqual))
		}
	}
	if filter.InstagramId != nil {
		if filter.InstagramId.Equals != nil {
			queryMods = append(queryMods, qm.Where("instagram_id = ?", *filter.InstagramId.Equals))
		}

		if filter.InstagramId.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("instagram_id != ?", *filter.InstagramId.NotEquals))
		}

		if filter.InstagramId.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("instagram_id IN ?", *filter.InstagramId.IsIn))
		}

		if filter.InstagramId.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("instagram_id NOT IN ?", *filter.InstagramId.IsNotIn))
		}

		if filter.InstagramId.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("instagram_id < ?", *filter.InstagramId.IsLessThan))
		}

		if filter.InstagramId.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("instagram_id <= ?", *filter.InstagramId.IsLessThanOrEqual))
		}

		if filter.InstagramId.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("instagram_id > ?", *filter.InstagramId.IsGreaterThan))
		}

		if filter.InstagramId.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("instagram_id >= ?", *filter.InstagramId.IsGreaterThanOrEqual))
		}
	}
	if filter.Username != nil {
		if filter.Username.Equals != nil {
			queryMods = append(queryMods, qm.Where("username = ?", *filter.Username.Equals))
		}

		if filter.Username.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("username != ?", *filter.Username.NotEquals))
		}

		if filter.Username.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username IN ?", *filter.Username.IsIn))
		}

		if filter.Username.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("username NOT IN ?", *filter.Username.IsNotIn))
		}

		if filter.Username.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("username < ?", *filter.Username.IsLessThan))
		}

		if filter.Username.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username <= ?", *filter.Username.IsLessThanOrEqual))
		}

		if filter.Username.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("username > ?", *filter.Username.IsGreaterThan))
		}

		if filter.Username.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("username >= ?", *filter.Username.IsGreaterThanOrEqual))
		}
	}
	if filter.FullName != nil {
		if filter.FullName.Equals != nil {
			queryMods = append(queryMods, qm.Where("full_name = ?", *filter.FullName.Equals))
		}

		if filter.FullName.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("full_name != ?", *filter.FullName.NotEquals))
		}

		if filter.FullName.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("full_name IN ?", *filter.FullName.IsIn))
		}

		if filter.FullName.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("full_name NOT IN ?", *filter.FullName.IsNotIn))
		}

		if filter.FullName.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("full_name < ?", *filter.FullName.IsLessThan))
		}

		if filter.FullName.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("full_name <= ?", *filter.FullName.IsLessThanOrEqual))
		}

		if filter.FullName.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("full_name > ?", *filter.FullName.IsGreaterThan))
		}

		if filter.FullName.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("full_name >= ?", *filter.FullName.IsGreaterThanOrEqual))
		}
	}
	if filter.ProfilePictureUrl != nil {
		if filter.ProfilePictureUrl.Equals != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url = ?", *filter.ProfilePictureUrl.Equals))
		}

		if filter.ProfilePictureUrl.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url != ?", *filter.ProfilePictureUrl.NotEquals))
		}

		if filter.ProfilePictureUrl.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("profile_picture_url IN ?", *filter.ProfilePictureUrl.IsIn))
		}

		if filter.ProfilePictureUrl.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("profile_picture_url NOT IN ?", *filter.ProfilePictureUrl.IsNotIn))
		}

		if filter.ProfilePictureUrl.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url < ?", *filter.ProfilePictureUrl.IsLessThan))
		}

		if filter.ProfilePictureUrl.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url <= ?", *filter.ProfilePictureUrl.IsLessThanOrEqual))
		}

		if filter.ProfilePictureUrl.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url > ?", *filter.ProfilePictureUrl.IsGreaterThan))
		}

		if filter.ProfilePictureUrl.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("profile_picture_url >= ?", *filter.ProfilePictureUrl.IsGreaterThanOrEqual))
		}
	}
	if filter.ScrapedInstagramAccount != nil {
		if filter.ScrapedInstagramAccount.Equals != nil {
			queryMods = append(queryMods, qm.Where("scraped_instagram_account = ?", *filter.ScrapedInstagramAccount.Equals))
		}

		if filter.ScrapedInstagramAccount.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("scraped_instagram_account != ?", *filter.ScrapedInstagramAccount.NotEquals))
		}

		if filter.ScrapedInstagramAccount.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("scraped_instagram_account IN ?", *filter.ScrapedInstagramAccount.IsIn))
		}

		if filter.ScrapedInstagramAccount.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("scraped_instagram_account NOT IN ?", *filter.ScrapedInstagramAccount.IsNotIn))
		}

		if filter.ScrapedInstagramAccount.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("scraped_instagram_account < ?", *filter.ScrapedInstagramAccount.IsLessThan))
		}

		if filter.ScrapedInstagramAccount.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("scraped_instagram_account <= ?", *filter.ScrapedInstagramAccount.IsLessThanOrEqual))
		}

		if filter.ScrapedInstagramAccount.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("scraped_instagram_account > ?", *filter.ScrapedInstagramAccount.IsGreaterThan))
		}

		if filter.ScrapedInstagramAccount.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("scraped_instagram_account >= ?", *filter.ScrapedInstagramAccount.IsGreaterThanOrEqual))
		}
	}
	if filter.Account != nil {
		if filter.Account.Equals != nil {
			queryMods = append(queryMods, qm.Where("account = ?", *filter.Account.Equals))
		}

		if filter.Account.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("account != ?", *filter.Account.NotEquals))
		}

		if filter.Account.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account IN ?", *filter.Account.IsIn))
		}

		if filter.Account.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("account NOT IN ?", *filter.Account.IsNotIn))
		}

		if filter.Account.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("account < ?", *filter.Account.IsLessThan))
		}

		if filter.Account.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account <= ?", *filter.Account.IsLessThanOrEqual))
		}

		if filter.Account.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("account > ?", *filter.Account.IsGreaterThan))
		}

		if filter.Account.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("account >= ?", *filter.Account.IsGreaterThanOrEqual))
		}
	}
	if filter.CreatedAt != nil {
		if filter.CreatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("created_at = ?", *filter.CreatedAt.Equals))
		}

		if filter.CreatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("created_at != ?", *filter.CreatedAt.NotEquals))
		}

		if filter.CreatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at IN ?", *filter.CreatedAt.IsIn))
		}

		if filter.CreatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("created_at NOT IN ?", *filter.CreatedAt.IsNotIn))
		}

		if filter.CreatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("created_at < ?", *filter.CreatedAt.IsLessThan))
		}

		if filter.CreatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at <= ?", *filter.CreatedAt.IsLessThanOrEqual))
		}

		if filter.CreatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("created_at > ?", *filter.CreatedAt.IsGreaterThan))
		}

		if filter.CreatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("created_at >= ?", *filter.CreatedAt.IsGreaterThanOrEqual))
		}
	}
	if filter.UpdatedAt != nil {
		if filter.UpdatedAt.Equals != nil {
			queryMods = append(queryMods, qm.Where("updated_at = ?", *filter.UpdatedAt.Equals))
		}

		if filter.UpdatedAt.NotEquals != nil {
			queryMods = append(queryMods, qm.Where("updated_at != ?", *filter.UpdatedAt.NotEquals))
		}

		if filter.UpdatedAt.IsIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at IN ?", *filter.UpdatedAt.IsIn))
		}

		if filter.UpdatedAt.IsNotIn != nil {
			queryMods = append(queryMods, qm.WhereIn("updated_at NOT IN ?", *filter.UpdatedAt.IsNotIn))
		}

		if filter.UpdatedAt.IsLessThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at < ?", *filter.UpdatedAt.IsLessThan))
		}

		if filter.UpdatedAt.IsLessThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at <= ?", *filter.UpdatedAt.IsLessThanOrEqual))
		}

		if filter.UpdatedAt.IsGreaterThan != nil {
			queryMods = append(queryMods, qm.Where("updated_at > ?", *filter.UpdatedAt.IsGreaterThan))
		}

		if filter.UpdatedAt.IsGreaterThanOrEqual != nil {
			queryMods = append(queryMods, qm.Where("updated_at >= ?", *filter.UpdatedAt.IsGreaterThanOrEqual))
		}
	}

	return queryMods, nil
}
