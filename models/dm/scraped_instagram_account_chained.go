// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ScrapedInstagramAccountChained is an object representing the database table.
type ScrapedInstagramAccountChained struct {
	ID                        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	InstagramID               string    `boil:"instagram_id" json:"instagram_id" toml:"instagram_id" yaml:"instagram_id"`
	Username                  string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	FullName                  string    `boil:"full_name" json:"full_name" toml:"full_name" yaml:"full_name"`
	ProfilePictureURL         string    `boil:"profile_picture_url" json:"profile_picture_url" toml:"profile_picture_url" yaml:"profile_picture_url"`
	ScrapedInstagramAccountID int       `boil:"scraped_instagram_account_id" json:"scraped_instagram_account_id" toml:"scraped_instagram_account_id" yaml:"scraped_instagram_account_id"`
	AccountID                 int       `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	CreatedAt                 time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                 time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *scrapedInstagramAccountChainedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scrapedInstagramAccountChainedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScrapedInstagramAccountChainedColumns = struct {
	ID                        string
	InstagramID               string
	Username                  string
	FullName                  string
	ProfilePictureURL         string
	ScrapedInstagramAccountID string
	AccountID                 string
	CreatedAt                 string
	UpdatedAt                 string
}{
	ID:                        "id",
	InstagramID:               "instagram_id",
	Username:                  "username",
	FullName:                  "full_name",
	ProfilePictureURL:         "profile_picture_url",
	ScrapedInstagramAccountID: "scraped_instagram_account_id",
	AccountID:                 "account_id",
	CreatedAt:                 "created_at",
	UpdatedAt:                 "updated_at",
}

var ScrapedInstagramAccountChainedTableColumns = struct {
	ID                        string
	InstagramID               string
	Username                  string
	FullName                  string
	ProfilePictureURL         string
	ScrapedInstagramAccountID string
	AccountID                 string
	CreatedAt                 string
	UpdatedAt                 string
}{
	ID:                        "scraped_instagram_account_chained.id",
	InstagramID:               "scraped_instagram_account_chained.instagram_id",
	Username:                  "scraped_instagram_account_chained.username",
	FullName:                  "scraped_instagram_account_chained.full_name",
	ProfilePictureURL:         "scraped_instagram_account_chained.profile_picture_url",
	ScrapedInstagramAccountID: "scraped_instagram_account_chained.scraped_instagram_account_id",
	AccountID:                 "scraped_instagram_account_chained.account_id",
	CreatedAt:                 "scraped_instagram_account_chained.created_at",
	UpdatedAt:                 "scraped_instagram_account_chained.updated_at",
}

// Generated where

var ScrapedInstagramAccountChainedWhere = struct {
	ID                        whereHelperint
	InstagramID               whereHelperstring
	Username                  whereHelperstring
	FullName                  whereHelperstring
	ProfilePictureURL         whereHelperstring
	ScrapedInstagramAccountID whereHelperint
	AccountID                 whereHelperint
	CreatedAt                 whereHelpertime_Time
	UpdatedAt                 whereHelpertime_Time
}{
	ID:                        whereHelperint{field: "\"scraped_instagram_account_chained\".\"id\""},
	InstagramID:               whereHelperstring{field: "\"scraped_instagram_account_chained\".\"instagram_id\""},
	Username:                  whereHelperstring{field: "\"scraped_instagram_account_chained\".\"username\""},
	FullName:                  whereHelperstring{field: "\"scraped_instagram_account_chained\".\"full_name\""},
	ProfilePictureURL:         whereHelperstring{field: "\"scraped_instagram_account_chained\".\"profile_picture_url\""},
	ScrapedInstagramAccountID: whereHelperint{field: "\"scraped_instagram_account_chained\".\"scraped_instagram_account_id\""},
	AccountID:                 whereHelperint{field: "\"scraped_instagram_account_chained\".\"account_id\""},
	CreatedAt:                 whereHelpertime_Time{field: "\"scraped_instagram_account_chained\".\"created_at\""},
	UpdatedAt:                 whereHelpertime_Time{field: "\"scraped_instagram_account_chained\".\"updated_at\""},
}

// ScrapedInstagramAccountChainedRels is where relationship names are stored.
var ScrapedInstagramAccountChainedRels = struct {
	Account                 string
	ScrapedInstagramAccount string
}{
	Account:                 "Account",
	ScrapedInstagramAccount: "ScrapedInstagramAccount",
}

// scrapedInstagramAccountChainedR is where relationships are stored.
type scrapedInstagramAccountChainedR struct {
	Account                 *Account                 `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	ScrapedInstagramAccount *ScrapedInstagramAccount `boil:"ScrapedInstagramAccount" json:"ScrapedInstagramAccount" toml:"ScrapedInstagramAccount" yaml:"ScrapedInstagramAccount"`
}

// NewStruct creates a new relationship struct
func (*scrapedInstagramAccountChainedR) NewStruct() *scrapedInstagramAccountChainedR {
	return &scrapedInstagramAccountChainedR{}
}

func (r *scrapedInstagramAccountChainedR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *scrapedInstagramAccountChainedR) GetScrapedInstagramAccount() *ScrapedInstagramAccount {
	if r == nil {
		return nil
	}
	return r.ScrapedInstagramAccount
}

// scrapedInstagramAccountChainedL is where Load methods for each relationship are stored.
type scrapedInstagramAccountChainedL struct{}

var (
	scrapedInstagramAccountChainedAllColumns            = []string{"id", "instagram_id", "username", "full_name", "profile_picture_url", "scraped_instagram_account_id", "account_id", "created_at", "updated_at"}
	scrapedInstagramAccountChainedColumnsWithoutDefault = []string{"instagram_id", "username", "full_name", "profile_picture_url", "scraped_instagram_account_id", "account_id"}
	scrapedInstagramAccountChainedColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	scrapedInstagramAccountChainedPrimaryKeyColumns     = []string{"id"}
	scrapedInstagramAccountChainedGeneratedColumns      = []string{}
)

type (
	// ScrapedInstagramAccountChainedSlice is an alias for a slice of pointers to ScrapedInstagramAccountChained.
	// This should almost always be used instead of []ScrapedInstagramAccountChained.
	ScrapedInstagramAccountChainedSlice []*ScrapedInstagramAccountChained
	// ScrapedInstagramAccountChainedHook is the signature for custom ScrapedInstagramAccountChained hook methods
	ScrapedInstagramAccountChainedHook func(context.Context, boil.ContextExecutor, *ScrapedInstagramAccountChained) error

	scrapedInstagramAccountChainedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scrapedInstagramAccountChainedType                 = reflect.TypeOf(&ScrapedInstagramAccountChained{})
	scrapedInstagramAccountChainedMapping              = queries.MakeStructMapping(scrapedInstagramAccountChainedType)
	scrapedInstagramAccountChainedPrimaryKeyMapping, _ = queries.BindMapping(scrapedInstagramAccountChainedType, scrapedInstagramAccountChainedMapping, scrapedInstagramAccountChainedPrimaryKeyColumns)
	scrapedInstagramAccountChainedInsertCacheMut       sync.RWMutex
	scrapedInstagramAccountChainedInsertCache          = make(map[string]insertCache)
	scrapedInstagramAccountChainedUpdateCacheMut       sync.RWMutex
	scrapedInstagramAccountChainedUpdateCache          = make(map[string]updateCache)
	scrapedInstagramAccountChainedUpsertCacheMut       sync.RWMutex
	scrapedInstagramAccountChainedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var scrapedInstagramAccountChainedAfterSelectHooks []ScrapedInstagramAccountChainedHook

var scrapedInstagramAccountChainedBeforeInsertHooks []ScrapedInstagramAccountChainedHook
var scrapedInstagramAccountChainedAfterInsertHooks []ScrapedInstagramAccountChainedHook

var scrapedInstagramAccountChainedBeforeUpdateHooks []ScrapedInstagramAccountChainedHook
var scrapedInstagramAccountChainedAfterUpdateHooks []ScrapedInstagramAccountChainedHook

var scrapedInstagramAccountChainedBeforeDeleteHooks []ScrapedInstagramAccountChainedHook
var scrapedInstagramAccountChainedAfterDeleteHooks []ScrapedInstagramAccountChainedHook

var scrapedInstagramAccountChainedBeforeUpsertHooks []ScrapedInstagramAccountChainedHook
var scrapedInstagramAccountChainedAfterUpsertHooks []ScrapedInstagramAccountChainedHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ScrapedInstagramAccountChained) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ScrapedInstagramAccountChained) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ScrapedInstagramAccountChained) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ScrapedInstagramAccountChained) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ScrapedInstagramAccountChained) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ScrapedInstagramAccountChained) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ScrapedInstagramAccountChained) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ScrapedInstagramAccountChained) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ScrapedInstagramAccountChained) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountChainedAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScrapedInstagramAccountChainedHook registers your hook function for all future operations.
func AddScrapedInstagramAccountChainedHook(hookPoint boil.HookPoint, scrapedInstagramAccountChainedHook ScrapedInstagramAccountChainedHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		scrapedInstagramAccountChainedAfterSelectHooks = append(scrapedInstagramAccountChainedAfterSelectHooks, scrapedInstagramAccountChainedHook)
	case boil.BeforeInsertHook:
		scrapedInstagramAccountChainedBeforeInsertHooks = append(scrapedInstagramAccountChainedBeforeInsertHooks, scrapedInstagramAccountChainedHook)
	case boil.AfterInsertHook:
		scrapedInstagramAccountChainedAfterInsertHooks = append(scrapedInstagramAccountChainedAfterInsertHooks, scrapedInstagramAccountChainedHook)
	case boil.BeforeUpdateHook:
		scrapedInstagramAccountChainedBeforeUpdateHooks = append(scrapedInstagramAccountChainedBeforeUpdateHooks, scrapedInstagramAccountChainedHook)
	case boil.AfterUpdateHook:
		scrapedInstagramAccountChainedAfterUpdateHooks = append(scrapedInstagramAccountChainedAfterUpdateHooks, scrapedInstagramAccountChainedHook)
	case boil.BeforeDeleteHook:
		scrapedInstagramAccountChainedBeforeDeleteHooks = append(scrapedInstagramAccountChainedBeforeDeleteHooks, scrapedInstagramAccountChainedHook)
	case boil.AfterDeleteHook:
		scrapedInstagramAccountChainedAfterDeleteHooks = append(scrapedInstagramAccountChainedAfterDeleteHooks, scrapedInstagramAccountChainedHook)
	case boil.BeforeUpsertHook:
		scrapedInstagramAccountChainedBeforeUpsertHooks = append(scrapedInstagramAccountChainedBeforeUpsertHooks, scrapedInstagramAccountChainedHook)
	case boil.AfterUpsertHook:
		scrapedInstagramAccountChainedAfterUpsertHooks = append(scrapedInstagramAccountChainedAfterUpsertHooks, scrapedInstagramAccountChainedHook)
	}
}

// One returns a single scrapedInstagramAccountChained record from the query.
func (q scrapedInstagramAccountChainedQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ScrapedInstagramAccountChained, error) {
	o := &ScrapedInstagramAccountChained{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: failed to execute a one query for scraped_instagram_account_chained")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ScrapedInstagramAccountChained records from the query.
func (q scrapedInstagramAccountChainedQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScrapedInstagramAccountChainedSlice, error) {
	var o []*ScrapedInstagramAccountChained

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dm: failed to assign all query results to ScrapedInstagramAccountChained slice")
	}

	if len(scrapedInstagramAccountChainedAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ScrapedInstagramAccountChained records in the query.
func (q scrapedInstagramAccountChainedQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to count scraped_instagram_account_chained rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scrapedInstagramAccountChainedQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dm: failed to check if scraped_instagram_account_chained exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *ScrapedInstagramAccountChained) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// ScrapedInstagramAccount pointed to by the foreign key.
func (o *ScrapedInstagramAccountChained) ScrapedInstagramAccount(mods ...qm.QueryMod) scrapedInstagramAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ScrapedInstagramAccountID),
	}

	queryMods = append(queryMods, mods...)

	return ScrapedInstagramAccounts(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scrapedInstagramAccountChainedL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScrapedInstagramAccountChained interface{}, mods queries.Applicator) error {
	var slice []*ScrapedInstagramAccountChained
	var object *ScrapedInstagramAccountChained

	if singular {
		object = maybeScrapedInstagramAccountChained.(*ScrapedInstagramAccountChained)
	} else {
		slice = *maybeScrapedInstagramAccountChained.(*[]*ScrapedInstagramAccountChained)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scrapedInstagramAccountChainedR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scrapedInstagramAccountChainedR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(scrapedInstagramAccountChainedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.ScrapedInstagramAccountChaineds = append(foreign.R.ScrapedInstagramAccountChaineds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.ScrapedInstagramAccountChaineds = append(foreign.R.ScrapedInstagramAccountChaineds, local)
				break
			}
		}
	}

	return nil
}

// LoadScrapedInstagramAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scrapedInstagramAccountChainedL) LoadScrapedInstagramAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScrapedInstagramAccountChained interface{}, mods queries.Applicator) error {
	var slice []*ScrapedInstagramAccountChained
	var object *ScrapedInstagramAccountChained

	if singular {
		object = maybeScrapedInstagramAccountChained.(*ScrapedInstagramAccountChained)
	} else {
		slice = *maybeScrapedInstagramAccountChained.(*[]*ScrapedInstagramAccountChained)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scrapedInstagramAccountChainedR{}
		}
		args = append(args, object.ScrapedInstagramAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scrapedInstagramAccountChainedR{}
			}

			for _, a := range args {
				if a == obj.ScrapedInstagramAccountID {
					continue Outer
				}
			}

			args = append(args, obj.ScrapedInstagramAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`scraped_instagram_account`),
		qm.WhereIn(`scraped_instagram_account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ScrapedInstagramAccount")
	}

	var resultSlice []*ScrapedInstagramAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ScrapedInstagramAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for scraped_instagram_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for scraped_instagram_account")
	}

	if len(scrapedInstagramAccountChainedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ScrapedInstagramAccount = foreign
		if foreign.R == nil {
			foreign.R = &scrapedInstagramAccountR{}
		}
		foreign.R.ScrapedInstagramAccountChaineds = append(foreign.R.ScrapedInstagramAccountChaineds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ScrapedInstagramAccountID == foreign.ID {
				local.R.ScrapedInstagramAccount = foreign
				if foreign.R == nil {
					foreign.R = &scrapedInstagramAccountR{}
				}
				foreign.R.ScrapedInstagramAccountChaineds = append(foreign.R.ScrapedInstagramAccountChaineds, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the scrapedInstagramAccountChained to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.ScrapedInstagramAccountChaineds.
func (o *ScrapedInstagramAccountChained) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"scraped_instagram_account_chained\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, scrapedInstagramAccountChainedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &scrapedInstagramAccountChainedR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			ScrapedInstagramAccountChaineds: ScrapedInstagramAccountChainedSlice{o},
		}
	} else {
		related.R.ScrapedInstagramAccountChaineds = append(related.R.ScrapedInstagramAccountChaineds, o)
	}

	return nil
}

// SetScrapedInstagramAccount of the scrapedInstagramAccountChained to the related item.
// Sets o.R.ScrapedInstagramAccount to related.
// Adds o to related.R.ScrapedInstagramAccountChaineds.
func (o *ScrapedInstagramAccountChained) SetScrapedInstagramAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ScrapedInstagramAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"scraped_instagram_account_chained\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"scraped_instagram_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, scrapedInstagramAccountChainedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ScrapedInstagramAccountID = related.ID
	if o.R == nil {
		o.R = &scrapedInstagramAccountChainedR{
			ScrapedInstagramAccount: related,
		}
	} else {
		o.R.ScrapedInstagramAccount = related
	}

	if related.R == nil {
		related.R = &scrapedInstagramAccountR{
			ScrapedInstagramAccountChaineds: ScrapedInstagramAccountChainedSlice{o},
		}
	} else {
		related.R.ScrapedInstagramAccountChaineds = append(related.R.ScrapedInstagramAccountChaineds, o)
	}

	return nil
}

// ScrapedInstagramAccountChaineds retrieves all the records using an executor.
func ScrapedInstagramAccountChaineds(mods ...qm.QueryMod) scrapedInstagramAccountChainedQuery {
	mods = append(mods, qm.From("\"scraped_instagram_account_chained\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"scraped_instagram_account_chained\".*"})
	}

	return scrapedInstagramAccountChainedQuery{q}
}

// FindScrapedInstagramAccountChained retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScrapedInstagramAccountChained(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ScrapedInstagramAccountChained, error) {
	scrapedInstagramAccountChainedObj := &ScrapedInstagramAccountChained{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"scraped_instagram_account_chained\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scrapedInstagramAccountChainedObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: unable to select from scraped_instagram_account_chained")
	}

	if err = scrapedInstagramAccountChainedObj.doAfterSelectHooks(ctx, exec); err != nil {
		return scrapedInstagramAccountChainedObj, err
	}

	return scrapedInstagramAccountChainedObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ScrapedInstagramAccountChained) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no scraped_instagram_account_chained provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scrapedInstagramAccountChainedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scrapedInstagramAccountChainedInsertCacheMut.RLock()
	cache, cached := scrapedInstagramAccountChainedInsertCache[key]
	scrapedInstagramAccountChainedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scrapedInstagramAccountChainedAllColumns,
			scrapedInstagramAccountChainedColumnsWithDefault,
			scrapedInstagramAccountChainedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scrapedInstagramAccountChainedType, scrapedInstagramAccountChainedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scrapedInstagramAccountChainedType, scrapedInstagramAccountChainedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"scraped_instagram_account_chained\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"scraped_instagram_account_chained\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dm: unable to insert into scraped_instagram_account_chained")
	}

	if !cached {
		scrapedInstagramAccountChainedInsertCacheMut.Lock()
		scrapedInstagramAccountChainedInsertCache[key] = cache
		scrapedInstagramAccountChainedInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ScrapedInstagramAccountChained.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ScrapedInstagramAccountChained) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	scrapedInstagramAccountChainedUpdateCacheMut.RLock()
	cache, cached := scrapedInstagramAccountChainedUpdateCache[key]
	scrapedInstagramAccountChainedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scrapedInstagramAccountChainedAllColumns,
			scrapedInstagramAccountChainedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dm: unable to update scraped_instagram_account_chained, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"scraped_instagram_account_chained\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, scrapedInstagramAccountChainedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scrapedInstagramAccountChainedType, scrapedInstagramAccountChainedMapping, append(wl, scrapedInstagramAccountChainedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update scraped_instagram_account_chained row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by update for scraped_instagram_account_chained")
	}

	if !cached {
		scrapedInstagramAccountChainedUpdateCacheMut.Lock()
		scrapedInstagramAccountChainedUpdateCache[key] = cache
		scrapedInstagramAccountChainedUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q scrapedInstagramAccountChainedQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all for scraped_instagram_account_chained")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected for scraped_instagram_account_chained")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScrapedInstagramAccountChainedSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scrapedInstagramAccountChainedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"scraped_instagram_account_chained\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, scrapedInstagramAccountChainedPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all in scrapedInstagramAccountChained slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected all in update all scrapedInstagramAccountChained")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ScrapedInstagramAccountChained) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no scraped_instagram_account_chained provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scrapedInstagramAccountChainedColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scrapedInstagramAccountChainedUpsertCacheMut.RLock()
	cache, cached := scrapedInstagramAccountChainedUpsertCache[key]
	scrapedInstagramAccountChainedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scrapedInstagramAccountChainedAllColumns,
			scrapedInstagramAccountChainedColumnsWithDefault,
			scrapedInstagramAccountChainedColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			scrapedInstagramAccountChainedAllColumns,
			scrapedInstagramAccountChainedPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dm: unable to upsert scraped_instagram_account_chained, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(scrapedInstagramAccountChainedPrimaryKeyColumns))
			copy(conflict, scrapedInstagramAccountChainedPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"scraped_instagram_account_chained\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scrapedInstagramAccountChainedType, scrapedInstagramAccountChainedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scrapedInstagramAccountChainedType, scrapedInstagramAccountChainedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dm: unable to upsert scraped_instagram_account_chained")
	}

	if !cached {
		scrapedInstagramAccountChainedUpsertCacheMut.Lock()
		scrapedInstagramAccountChainedUpsertCache[key] = cache
		scrapedInstagramAccountChainedUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ScrapedInstagramAccountChained record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ScrapedInstagramAccountChained) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dm: no ScrapedInstagramAccountChained provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scrapedInstagramAccountChainedPrimaryKeyMapping)
	sql := "DELETE FROM \"scraped_instagram_account_chained\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete from scraped_instagram_account_chained")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by delete for scraped_instagram_account_chained")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scrapedInstagramAccountChainedQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dm: no scrapedInstagramAccountChainedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from scraped_instagram_account_chained")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for scraped_instagram_account_chained")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScrapedInstagramAccountChainedSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(scrapedInstagramAccountChainedBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scrapedInstagramAccountChainedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"scraped_instagram_account_chained\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scrapedInstagramAccountChainedPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from scrapedInstagramAccountChained slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for scraped_instagram_account_chained")
	}

	if len(scrapedInstagramAccountChainedAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ScrapedInstagramAccountChained) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScrapedInstagramAccountChained(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScrapedInstagramAccountChainedSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScrapedInstagramAccountChainedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scrapedInstagramAccountChainedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"scraped_instagram_account_chained\".* FROM \"scraped_instagram_account_chained\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scrapedInstagramAccountChainedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dm: unable to reload all in ScrapedInstagramAccountChainedSlice")
	}

	*o = slice

	return nil
}

// ScrapedInstagramAccountChainedExists checks if the ScrapedInstagramAccountChained row exists.
func ScrapedInstagramAccountChainedExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"scraped_instagram_account_chained\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dm: unable to check if scraped_instagram_account_chained exists")
	}

	return exists, nil
}
