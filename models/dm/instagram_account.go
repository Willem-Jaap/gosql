// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InstagramAccount is an object representing the database table.
type InstagramAccount struct {
	ID                         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username                   string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password                   string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	Country                    string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	Active                     bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	TotalActionsDone           int       `boil:"total_actions_done" json:"total_actions_done" toml:"total_actions_done" yaml:"total_actions_done"`
	NeedsToBeChecked           bool      `boil:"needs_to_be_checked" json:"needs_to_be_checked" toml:"needs_to_be_checked" yaml:"needs_to_be_checked"`
	LoginFailed                bool      `boil:"login_failed" json:"login_failed" toml:"login_failed" yaml:"login_failed"`
	IsSetup                    bool      `boil:"is_setup" json:"is_setup" toml:"is_setup" yaml:"is_setup"`
	SetupTargetAccountUsername string    `boil:"setup_target_account_username" json:"setup_target_account_username" toml:"setup_target_account_username" yaml:"setup_target_account_username"`
	ProxyID                    null.Int  `boil:"proxy_id" json:"proxy_id,omitempty" toml:"proxy_id" yaml:"proxy_id,omitempty"`
	CredentialID               null.Int  `boil:"credential_id" json:"credential_id,omitempty" toml:"credential_id" yaml:"credential_id,omitempty"`
	AccountID                  null.Int  `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	JobID                      null.Int  `boil:"job_id" json:"job_id,omitempty" toml:"job_id" yaml:"job_id,omitempty"`
	CreatedAt                  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *instagramAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L instagramAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstagramAccountColumns = struct {
	ID                         string
	Username                   string
	Password                   string
	Country                    string
	Active                     string
	TotalActionsDone           string
	NeedsToBeChecked           string
	LoginFailed                string
	IsSetup                    string
	SetupTargetAccountUsername string
	ProxyID                    string
	CredentialID               string
	AccountID                  string
	JobID                      string
	CreatedAt                  string
	UpdatedAt                  string
}{
	ID:                         "id",
	Username:                   "username",
	Password:                   "password",
	Country:                    "country",
	Active:                     "active",
	TotalActionsDone:           "total_actions_done",
	NeedsToBeChecked:           "needs_to_be_checked",
	LoginFailed:                "login_failed",
	IsSetup:                    "is_setup",
	SetupTargetAccountUsername: "setup_target_account_username",
	ProxyID:                    "proxy_id",
	CredentialID:               "credential_id",
	AccountID:                  "account_id",
	JobID:                      "job_id",
	CreatedAt:                  "created_at",
	UpdatedAt:                  "updated_at",
}

var InstagramAccountTableColumns = struct {
	ID                         string
	Username                   string
	Password                   string
	Country                    string
	Active                     string
	TotalActionsDone           string
	NeedsToBeChecked           string
	LoginFailed                string
	IsSetup                    string
	SetupTargetAccountUsername string
	ProxyID                    string
	CredentialID               string
	AccountID                  string
	JobID                      string
	CreatedAt                  string
	UpdatedAt                  string
}{
	ID:                         "instagram_account.id",
	Username:                   "instagram_account.username",
	Password:                   "instagram_account.password",
	Country:                    "instagram_account.country",
	Active:                     "instagram_account.active",
	TotalActionsDone:           "instagram_account.total_actions_done",
	NeedsToBeChecked:           "instagram_account.needs_to_be_checked",
	LoginFailed:                "instagram_account.login_failed",
	IsSetup:                    "instagram_account.is_setup",
	SetupTargetAccountUsername: "instagram_account.setup_target_account_username",
	ProxyID:                    "instagram_account.proxy_id",
	CredentialID:               "instagram_account.credential_id",
	AccountID:                  "instagram_account.account_id",
	JobID:                      "instagram_account.job_id",
	CreatedAt:                  "instagram_account.created_at",
	UpdatedAt:                  "instagram_account.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var InstagramAccountWhere = struct {
	ID                         whereHelperint
	Username                   whereHelperstring
	Password                   whereHelperstring
	Country                    whereHelperstring
	Active                     whereHelperbool
	TotalActionsDone           whereHelperint
	NeedsToBeChecked           whereHelperbool
	LoginFailed                whereHelperbool
	IsSetup                    whereHelperbool
	SetupTargetAccountUsername whereHelperstring
	ProxyID                    whereHelpernull_Int
	CredentialID               whereHelpernull_Int
	AccountID                  whereHelpernull_Int
	JobID                      whereHelpernull_Int
	CreatedAt                  whereHelpertime_Time
	UpdatedAt                  whereHelpertime_Time
}{
	ID:                         whereHelperint{field: "\"instagram_account\".\"id\""},
	Username:                   whereHelperstring{field: "\"instagram_account\".\"username\""},
	Password:                   whereHelperstring{field: "\"instagram_account\".\"password\""},
	Country:                    whereHelperstring{field: "\"instagram_account\".\"country\""},
	Active:                     whereHelperbool{field: "\"instagram_account\".\"active\""},
	TotalActionsDone:           whereHelperint{field: "\"instagram_account\".\"total_actions_done\""},
	NeedsToBeChecked:           whereHelperbool{field: "\"instagram_account\".\"needs_to_be_checked\""},
	LoginFailed:                whereHelperbool{field: "\"instagram_account\".\"login_failed\""},
	IsSetup:                    whereHelperbool{field: "\"instagram_account\".\"is_setup\""},
	SetupTargetAccountUsername: whereHelperstring{field: "\"instagram_account\".\"setup_target_account_username\""},
	ProxyID:                    whereHelpernull_Int{field: "\"instagram_account\".\"proxy_id\""},
	CredentialID:               whereHelpernull_Int{field: "\"instagram_account\".\"credential_id\""},
	AccountID:                  whereHelpernull_Int{field: "\"instagram_account\".\"account_id\""},
	JobID:                      whereHelpernull_Int{field: "\"instagram_account\".\"job_id\""},
	CreatedAt:                  whereHelpertime_Time{field: "\"instagram_account\".\"created_at\""},
	UpdatedAt:                  whereHelpertime_Time{field: "\"instagram_account\".\"updated_at\""},
}

// InstagramAccountRels is where relationship names are stored.
var InstagramAccountRels = struct {
	Account    string
	Credential string
	Job        string
	Proxy      string
}{
	Account:    "Account",
	Credential: "Credential",
	Job:        "Job",
	Proxy:      "Proxy",
}

// instagramAccountR is where relationships are stored.
type instagramAccountR struct {
	Account    *Account    `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Credential *Credential `boil:"Credential" json:"Credential" toml:"Credential" yaml:"Credential"`
	Job        *Job        `boil:"Job" json:"Job" toml:"Job" yaml:"Job"`
	Proxy      *Proxy      `boil:"Proxy" json:"Proxy" toml:"Proxy" yaml:"Proxy"`
}

// NewStruct creates a new relationship struct
func (*instagramAccountR) NewStruct() *instagramAccountR {
	return &instagramAccountR{}
}

func (r *instagramAccountR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *instagramAccountR) GetCredential() *Credential {
	if r == nil {
		return nil
	}
	return r.Credential
}

func (r *instagramAccountR) GetJob() *Job {
	if r == nil {
		return nil
	}
	return r.Job
}

func (r *instagramAccountR) GetProxy() *Proxy {
	if r == nil {
		return nil
	}
	return r.Proxy
}

// instagramAccountL is where Load methods for each relationship are stored.
type instagramAccountL struct{}

var (
	instagramAccountAllColumns            = []string{"id", "username", "password", "country", "active", "total_actions_done", "needs_to_be_checked", "login_failed", "is_setup", "setup_target_account_username", "proxy_id", "credential_id", "account_id", "job_id", "created_at", "updated_at"}
	instagramAccountColumnsWithoutDefault = []string{"username", "password", "country", "setup_target_account_username"}
	instagramAccountColumnsWithDefault    = []string{"id", "active", "total_actions_done", "needs_to_be_checked", "login_failed", "is_setup", "proxy_id", "credential_id", "account_id", "job_id", "created_at", "updated_at"}
	instagramAccountPrimaryKeyColumns     = []string{"id"}
	instagramAccountGeneratedColumns      = []string{}
)

type (
	// InstagramAccountSlice is an alias for a slice of pointers to InstagramAccount.
	// This should almost always be used instead of []InstagramAccount.
	InstagramAccountSlice []*InstagramAccount
	// InstagramAccountHook is the signature for custom InstagramAccount hook methods
	InstagramAccountHook func(context.Context, boil.ContextExecutor, *InstagramAccount) error

	instagramAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	instagramAccountType                 = reflect.TypeOf(&InstagramAccount{})
	instagramAccountMapping              = queries.MakeStructMapping(instagramAccountType)
	instagramAccountPrimaryKeyMapping, _ = queries.BindMapping(instagramAccountType, instagramAccountMapping, instagramAccountPrimaryKeyColumns)
	instagramAccountInsertCacheMut       sync.RWMutex
	instagramAccountInsertCache          = make(map[string]insertCache)
	instagramAccountUpdateCacheMut       sync.RWMutex
	instagramAccountUpdateCache          = make(map[string]updateCache)
	instagramAccountUpsertCacheMut       sync.RWMutex
	instagramAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var instagramAccountAfterSelectHooks []InstagramAccountHook

var instagramAccountBeforeInsertHooks []InstagramAccountHook
var instagramAccountAfterInsertHooks []InstagramAccountHook

var instagramAccountBeforeUpdateHooks []InstagramAccountHook
var instagramAccountAfterUpdateHooks []InstagramAccountHook

var instagramAccountBeforeDeleteHooks []InstagramAccountHook
var instagramAccountAfterDeleteHooks []InstagramAccountHook

var instagramAccountBeforeUpsertHooks []InstagramAccountHook
var instagramAccountAfterUpsertHooks []InstagramAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstagramAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstagramAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstagramAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstagramAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstagramAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstagramAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstagramAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstagramAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstagramAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instagramAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstagramAccountHook registers your hook function for all future operations.
func AddInstagramAccountHook(hookPoint boil.HookPoint, instagramAccountHook InstagramAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		instagramAccountAfterSelectHooks = append(instagramAccountAfterSelectHooks, instagramAccountHook)
	case boil.BeforeInsertHook:
		instagramAccountBeforeInsertHooks = append(instagramAccountBeforeInsertHooks, instagramAccountHook)
	case boil.AfterInsertHook:
		instagramAccountAfterInsertHooks = append(instagramAccountAfterInsertHooks, instagramAccountHook)
	case boil.BeforeUpdateHook:
		instagramAccountBeforeUpdateHooks = append(instagramAccountBeforeUpdateHooks, instagramAccountHook)
	case boil.AfterUpdateHook:
		instagramAccountAfterUpdateHooks = append(instagramAccountAfterUpdateHooks, instagramAccountHook)
	case boil.BeforeDeleteHook:
		instagramAccountBeforeDeleteHooks = append(instagramAccountBeforeDeleteHooks, instagramAccountHook)
	case boil.AfterDeleteHook:
		instagramAccountAfterDeleteHooks = append(instagramAccountAfterDeleteHooks, instagramAccountHook)
	case boil.BeforeUpsertHook:
		instagramAccountBeforeUpsertHooks = append(instagramAccountBeforeUpsertHooks, instagramAccountHook)
	case boil.AfterUpsertHook:
		instagramAccountAfterUpsertHooks = append(instagramAccountAfterUpsertHooks, instagramAccountHook)
	}
}

// One returns a single instagramAccount record from the query.
func (q instagramAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InstagramAccount, error) {
	o := &InstagramAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: failed to execute a one query for instagram_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InstagramAccount records from the query.
func (q instagramAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstagramAccountSlice, error) {
	var o []*InstagramAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dm: failed to assign all query results to InstagramAccount slice")
	}

	if len(instagramAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InstagramAccount records in the query.
func (q instagramAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to count instagram_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q instagramAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dm: failed to check if instagram_account exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *InstagramAccount) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Credential pointed to by the foreign key.
func (o *InstagramAccount) Credential(mods ...qm.QueryMod) credentialQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CredentialID),
	}

	queryMods = append(queryMods, mods...)

	return Credentials(queryMods...)
}

// Job pointed to by the foreign key.
func (o *InstagramAccount) Job(mods ...qm.QueryMod) jobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.JobID),
	}

	queryMods = append(queryMods, mods...)

	return Jobs(queryMods...)
}

// Proxy pointed to by the foreign key.
func (o *InstagramAccount) Proxy(mods ...qm.QueryMod) proxyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProxyID),
	}

	queryMods = append(queryMods, mods...)

	return Proxies(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (instagramAccountL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInstagramAccount interface{}, mods queries.Applicator) error {
	var slice []*InstagramAccount
	var object *InstagramAccount

	if singular {
		object = maybeInstagramAccount.(*InstagramAccount)
	} else {
		slice = *maybeInstagramAccount.(*[]*InstagramAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &instagramAccountR{}
		}
		if !queries.IsNil(object.AccountID) {
			args = append(args, object.AccountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &instagramAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AccountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AccountID) {
				args = append(args, obj.AccountID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(instagramAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AccountID, foreign.ID) {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadCredential allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (instagramAccountL) LoadCredential(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInstagramAccount interface{}, mods queries.Applicator) error {
	var slice []*InstagramAccount
	var object *InstagramAccount

	if singular {
		object = maybeInstagramAccount.(*InstagramAccount)
	} else {
		slice = *maybeInstagramAccount.(*[]*InstagramAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &instagramAccountR{}
		}
		if !queries.IsNil(object.CredentialID) {
			args = append(args, object.CredentialID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &instagramAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CredentialID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CredentialID) {
				args = append(args, obj.CredentialID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`credential`),
		qm.WhereIn(`credential.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Credential")
	}

	var resultSlice []*Credential
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Credential")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for credential")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for credential")
	}

	if len(instagramAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Credential = foreign
		if foreign.R == nil {
			foreign.R = &credentialR{}
		}
		foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CredentialID, foreign.ID) {
				local.R.Credential = foreign
				if foreign.R == nil {
					foreign.R = &credentialR{}
				}
				foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadJob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (instagramAccountL) LoadJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInstagramAccount interface{}, mods queries.Applicator) error {
	var slice []*InstagramAccount
	var object *InstagramAccount

	if singular {
		object = maybeInstagramAccount.(*InstagramAccount)
	} else {
		slice = *maybeInstagramAccount.(*[]*InstagramAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &instagramAccountR{}
		}
		if !queries.IsNil(object.JobID) {
			args = append(args, object.JobID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &instagramAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.JobID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.JobID) {
				args = append(args, obj.JobID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job`),
		qm.WhereIn(`job.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for job")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job")
	}

	if len(instagramAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Job = foreign
		if foreign.R == nil {
			foreign.R = &jobR{}
		}
		foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.JobID, foreign.ID) {
				local.R.Job = foreign
				if foreign.R == nil {
					foreign.R = &jobR{}
				}
				foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadProxy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (instagramAccountL) LoadProxy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInstagramAccount interface{}, mods queries.Applicator) error {
	var slice []*InstagramAccount
	var object *InstagramAccount

	if singular {
		object = maybeInstagramAccount.(*InstagramAccount)
	} else {
		slice = *maybeInstagramAccount.(*[]*InstagramAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &instagramAccountR{}
		}
		if !queries.IsNil(object.ProxyID) {
			args = append(args, object.ProxyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &instagramAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProxyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProxyID) {
				args = append(args, obj.ProxyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`proxy`),
		qm.WhereIn(`proxy.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Proxy")
	}

	var resultSlice []*Proxy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Proxy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for proxy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for proxy")
	}

	if len(instagramAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Proxy = foreign
		if foreign.R == nil {
			foreign.R = &proxyR{}
		}
		foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProxyID, foreign.ID) {
				local.R.Proxy = foreign
				if foreign.R == nil {
					foreign.R = &proxyR{}
				}
				foreign.R.InstagramAccounts = append(foreign.R.InstagramAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the instagramAccount to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.InstagramAccounts.
func (o *InstagramAccount) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instagram_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, instagramAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AccountID, related.ID)
	if o.R == nil {
		o.R = &instagramAccountR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			InstagramAccounts: InstagramAccountSlice{o},
		}
	} else {
		related.R.InstagramAccounts = append(related.R.InstagramAccounts, o)
	}

	return nil
}

// RemoveAccount relationship.
// Sets o.R.Account to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InstagramAccount) RemoveAccount(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.AccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Account = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InstagramAccounts {
		if queries.Equal(o.AccountID, ri.AccountID) {
			continue
		}

		ln := len(related.R.InstagramAccounts)
		if ln > 1 && i < ln-1 {
			related.R.InstagramAccounts[i] = related.R.InstagramAccounts[ln-1]
		}
		related.R.InstagramAccounts = related.R.InstagramAccounts[:ln-1]
		break
	}
	return nil
}

// SetCredential of the instagramAccount to the related item.
// Sets o.R.Credential to related.
// Adds o to related.R.InstagramAccounts.
func (o *InstagramAccount) SetCredential(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Credential) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instagram_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"credential_id"}),
		strmangle.WhereClause("\"", "\"", 2, instagramAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CredentialID, related.ID)
	if o.R == nil {
		o.R = &instagramAccountR{
			Credential: related,
		}
	} else {
		o.R.Credential = related
	}

	if related.R == nil {
		related.R = &credentialR{
			InstagramAccounts: InstagramAccountSlice{o},
		}
	} else {
		related.R.InstagramAccounts = append(related.R.InstagramAccounts, o)
	}

	return nil
}

// RemoveCredential relationship.
// Sets o.R.Credential to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InstagramAccount) RemoveCredential(ctx context.Context, exec boil.ContextExecutor, related *Credential) error {
	var err error

	queries.SetScanner(&o.CredentialID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("credential_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Credential = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InstagramAccounts {
		if queries.Equal(o.CredentialID, ri.CredentialID) {
			continue
		}

		ln := len(related.R.InstagramAccounts)
		if ln > 1 && i < ln-1 {
			related.R.InstagramAccounts[i] = related.R.InstagramAccounts[ln-1]
		}
		related.R.InstagramAccounts = related.R.InstagramAccounts[:ln-1]
		break
	}
	return nil
}

// SetJob of the instagramAccount to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.InstagramAccounts.
func (o *InstagramAccount) SetJob(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Job) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instagram_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
		strmangle.WhereClause("\"", "\"", 2, instagramAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.JobID, related.ID)
	if o.R == nil {
		o.R = &instagramAccountR{
			Job: related,
		}
	} else {
		o.R.Job = related
	}

	if related.R == nil {
		related.R = &jobR{
			InstagramAccounts: InstagramAccountSlice{o},
		}
	} else {
		related.R.InstagramAccounts = append(related.R.InstagramAccounts, o)
	}

	return nil
}

// RemoveJob relationship.
// Sets o.R.Job to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InstagramAccount) RemoveJob(ctx context.Context, exec boil.ContextExecutor, related *Job) error {
	var err error

	queries.SetScanner(&o.JobID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("job_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Job = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InstagramAccounts {
		if queries.Equal(o.JobID, ri.JobID) {
			continue
		}

		ln := len(related.R.InstagramAccounts)
		if ln > 1 && i < ln-1 {
			related.R.InstagramAccounts[i] = related.R.InstagramAccounts[ln-1]
		}
		related.R.InstagramAccounts = related.R.InstagramAccounts[:ln-1]
		break
	}
	return nil
}

// SetProxy of the instagramAccount to the related item.
// Sets o.R.Proxy to related.
// Adds o to related.R.InstagramAccounts.
func (o *InstagramAccount) SetProxy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Proxy) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instagram_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"proxy_id"}),
		strmangle.WhereClause("\"", "\"", 2, instagramAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProxyID, related.ID)
	if o.R == nil {
		o.R = &instagramAccountR{
			Proxy: related,
		}
	} else {
		o.R.Proxy = related
	}

	if related.R == nil {
		related.R = &proxyR{
			InstagramAccounts: InstagramAccountSlice{o},
		}
	} else {
		related.R.InstagramAccounts = append(related.R.InstagramAccounts, o)
	}

	return nil
}

// RemoveProxy relationship.
// Sets o.R.Proxy to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InstagramAccount) RemoveProxy(ctx context.Context, exec boil.ContextExecutor, related *Proxy) error {
	var err error

	queries.SetScanner(&o.ProxyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("proxy_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Proxy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InstagramAccounts {
		if queries.Equal(o.ProxyID, ri.ProxyID) {
			continue
		}

		ln := len(related.R.InstagramAccounts)
		if ln > 1 && i < ln-1 {
			related.R.InstagramAccounts[i] = related.R.InstagramAccounts[ln-1]
		}
		related.R.InstagramAccounts = related.R.InstagramAccounts[:ln-1]
		break
	}
	return nil
}

// InstagramAccounts retrieves all the records using an executor.
func InstagramAccounts(mods ...qm.QueryMod) instagramAccountQuery {
	mods = append(mods, qm.From("\"instagram_account\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"instagram_account\".*"})
	}

	return instagramAccountQuery{q}
}

// FindInstagramAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstagramAccount(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*InstagramAccount, error) {
	instagramAccountObj := &InstagramAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instagram_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, instagramAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: unable to select from instagram_account")
	}

	if err = instagramAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return instagramAccountObj, err
	}

	return instagramAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InstagramAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no instagram_account provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instagramAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	instagramAccountInsertCacheMut.RLock()
	cache, cached := instagramAccountInsertCache[key]
	instagramAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			instagramAccountAllColumns,
			instagramAccountColumnsWithDefault,
			instagramAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(instagramAccountType, instagramAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(instagramAccountType, instagramAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instagram_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instagram_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dm: unable to insert into instagram_account")
	}

	if !cached {
		instagramAccountInsertCacheMut.Lock()
		instagramAccountInsertCache[key] = cache
		instagramAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InstagramAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InstagramAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	instagramAccountUpdateCacheMut.RLock()
	cache, cached := instagramAccountUpdateCache[key]
	instagramAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			instagramAccountAllColumns,
			instagramAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dm: unable to update instagram_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instagram_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, instagramAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(instagramAccountType, instagramAccountMapping, append(wl, instagramAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update instagram_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by update for instagram_account")
	}

	if !cached {
		instagramAccountUpdateCacheMut.Lock()
		instagramAccountUpdateCache[key] = cache
		instagramAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q instagramAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all for instagram_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected for instagram_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstagramAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instagramAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instagram_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, instagramAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all in instagramAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected all in update all instagramAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InstagramAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no instagram_account provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instagramAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	instagramAccountUpsertCacheMut.RLock()
	cache, cached := instagramAccountUpsertCache[key]
	instagramAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			instagramAccountAllColumns,
			instagramAccountColumnsWithDefault,
			instagramAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			instagramAccountAllColumns,
			instagramAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dm: unable to upsert instagram_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(instagramAccountPrimaryKeyColumns))
			copy(conflict, instagramAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"instagram_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(instagramAccountType, instagramAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(instagramAccountType, instagramAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dm: unable to upsert instagram_account")
	}

	if !cached {
		instagramAccountUpsertCacheMut.Lock()
		instagramAccountUpsertCache[key] = cache
		instagramAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InstagramAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstagramAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dm: no InstagramAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), instagramAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"instagram_account\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete from instagram_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by delete for instagram_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q instagramAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dm: no instagramAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from instagram_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for instagram_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstagramAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(instagramAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instagramAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instagram_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instagramAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from instagramAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for instagram_account")
	}

	if len(instagramAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstagramAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstagramAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstagramAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstagramAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instagramAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instagram_account\".* FROM \"instagram_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instagramAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dm: unable to reload all in InstagramAccountSlice")
	}

	*o = slice

	return nil
}

// InstagramAccountExists checks if the InstagramAccount row exists.
func InstagramAccountExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instagram_account\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dm: unable to check if instagram_account exists")
	}

	return exists, nil
}
