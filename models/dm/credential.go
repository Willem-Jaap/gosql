// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Credential is an object representing the database table.
type Credential struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CSFRToken   string    `boil:"csfr_token" json:"csfr_token" toml:"csfr_token" yaml:"csfr_token"`
	UserAgent   string    `boil:"user_agent" json:"user_agent" toml:"user_agent" yaml:"user_agent"`
	AppID       string    `boil:"app_id" json:"app_id" toml:"app_id" yaml:"app_id"`
	Cookie      string    `boil:"cookie" json:"cookie" toml:"cookie" yaml:"cookie"`
	InstagramID string    `boil:"instagram_id" json:"instagram_id" toml:"instagram_id" yaml:"instagram_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *credentialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L credentialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CredentialColumns = struct {
	ID          string
	CSFRToken   string
	UserAgent   string
	AppID       string
	Cookie      string
	InstagramID string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	CSFRToken:   "csfr_token",
	UserAgent:   "user_agent",
	AppID:       "app_id",
	Cookie:      "cookie",
	InstagramID: "instagram_id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var CredentialTableColumns = struct {
	ID          string
	CSFRToken   string
	UserAgent   string
	AppID       string
	Cookie      string
	InstagramID string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "credential.id",
	CSFRToken:   "credential.csfr_token",
	UserAgent:   "credential.user_agent",
	AppID:       "credential.app_id",
	Cookie:      "credential.cookie",
	InstagramID: "credential.instagram_id",
	CreatedAt:   "credential.created_at",
	UpdatedAt:   "credential.updated_at",
}

// Generated where

var CredentialWhere = struct {
	ID          whereHelperint
	CSFRToken   whereHelperstring
	UserAgent   whereHelperstring
	AppID       whereHelperstring
	Cookie      whereHelperstring
	InstagramID whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"credential\".\"id\""},
	CSFRToken:   whereHelperstring{field: "\"credential\".\"csfr_token\""},
	UserAgent:   whereHelperstring{field: "\"credential\".\"user_agent\""},
	AppID:       whereHelperstring{field: "\"credential\".\"app_id\""},
	Cookie:      whereHelperstring{field: "\"credential\".\"cookie\""},
	InstagramID: whereHelperstring{field: "\"credential\".\"instagram_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"credential\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"credential\".\"updated_at\""},
}

// CredentialRels is where relationship names are stored.
var CredentialRels = struct {
	InstagramAccounts string
}{
	InstagramAccounts: "InstagramAccounts",
}

// credentialR is where relationships are stored.
type credentialR struct {
	InstagramAccounts InstagramAccountSlice `boil:"InstagramAccounts" json:"InstagramAccounts" toml:"InstagramAccounts" yaml:"InstagramAccounts"`
}

// NewStruct creates a new relationship struct
func (*credentialR) NewStruct() *credentialR {
	return &credentialR{}
}

func (r *credentialR) GetInstagramAccounts() InstagramAccountSlice {
	if r == nil {
		return nil
	}
	return r.InstagramAccounts
}

// credentialL is where Load methods for each relationship are stored.
type credentialL struct{}

var (
	credentialAllColumns            = []string{"id", "csfr_token", "user_agent", "app_id", "cookie", "instagram_id", "created_at", "updated_at"}
	credentialColumnsWithoutDefault = []string{"csfr_token", "user_agent", "app_id", "cookie", "instagram_id"}
	credentialColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	credentialPrimaryKeyColumns     = []string{"id"}
	credentialGeneratedColumns      = []string{}
)

type (
	// CredentialSlice is an alias for a slice of pointers to Credential.
	// This should almost always be used instead of []Credential.
	CredentialSlice []*Credential
	// CredentialHook is the signature for custom Credential hook methods
	CredentialHook func(context.Context, boil.ContextExecutor, *Credential) error

	credentialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	credentialType                 = reflect.TypeOf(&Credential{})
	credentialMapping              = queries.MakeStructMapping(credentialType)
	credentialPrimaryKeyMapping, _ = queries.BindMapping(credentialType, credentialMapping, credentialPrimaryKeyColumns)
	credentialInsertCacheMut       sync.RWMutex
	credentialInsertCache          = make(map[string]insertCache)
	credentialUpdateCacheMut       sync.RWMutex
	credentialUpdateCache          = make(map[string]updateCache)
	credentialUpsertCacheMut       sync.RWMutex
	credentialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var credentialAfterSelectHooks []CredentialHook

var credentialBeforeInsertHooks []CredentialHook
var credentialAfterInsertHooks []CredentialHook

var credentialBeforeUpdateHooks []CredentialHook
var credentialAfterUpdateHooks []CredentialHook

var credentialBeforeDeleteHooks []CredentialHook
var credentialAfterDeleteHooks []CredentialHook

var credentialBeforeUpsertHooks []CredentialHook
var credentialAfterUpsertHooks []CredentialHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Credential) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Credential) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Credential) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Credential) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Credential) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Credential) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Credential) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Credential) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Credential) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range credentialAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCredentialHook registers your hook function for all future operations.
func AddCredentialHook(hookPoint boil.HookPoint, credentialHook CredentialHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		credentialAfterSelectHooks = append(credentialAfterSelectHooks, credentialHook)
	case boil.BeforeInsertHook:
		credentialBeforeInsertHooks = append(credentialBeforeInsertHooks, credentialHook)
	case boil.AfterInsertHook:
		credentialAfterInsertHooks = append(credentialAfterInsertHooks, credentialHook)
	case boil.BeforeUpdateHook:
		credentialBeforeUpdateHooks = append(credentialBeforeUpdateHooks, credentialHook)
	case boil.AfterUpdateHook:
		credentialAfterUpdateHooks = append(credentialAfterUpdateHooks, credentialHook)
	case boil.BeforeDeleteHook:
		credentialBeforeDeleteHooks = append(credentialBeforeDeleteHooks, credentialHook)
	case boil.AfterDeleteHook:
		credentialAfterDeleteHooks = append(credentialAfterDeleteHooks, credentialHook)
	case boil.BeforeUpsertHook:
		credentialBeforeUpsertHooks = append(credentialBeforeUpsertHooks, credentialHook)
	case boil.AfterUpsertHook:
		credentialAfterUpsertHooks = append(credentialAfterUpsertHooks, credentialHook)
	}
}

// One returns a single credential record from the query.
func (q credentialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Credential, error) {
	o := &Credential{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: failed to execute a one query for credential")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Credential records from the query.
func (q credentialQuery) All(ctx context.Context, exec boil.ContextExecutor) (CredentialSlice, error) {
	var o []*Credential

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dm: failed to assign all query results to Credential slice")
	}

	if len(credentialAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Credential records in the query.
func (q credentialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to count credential rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q credentialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dm: failed to check if credential exists")
	}

	return count > 0, nil
}

// InstagramAccounts retrieves all the instagram_account's InstagramAccounts with an executor.
func (o *Credential) InstagramAccounts(mods ...qm.QueryMod) instagramAccountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instagram_account\".\"credential_id\"=?", o.ID),
	)

	return InstagramAccounts(queryMods...)
}

// LoadInstagramAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (credentialL) LoadInstagramAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCredential interface{}, mods queries.Applicator) error {
	var slice []*Credential
	var object *Credential

	if singular {
		object = maybeCredential.(*Credential)
	} else {
		slice = *maybeCredential.(*[]*Credential)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &credentialR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &credentialR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`instagram_account`),
		qm.WhereIn(`instagram_account.credential_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load instagram_account")
	}

	var resultSlice []*InstagramAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice instagram_account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on instagram_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for instagram_account")
	}

	if len(instagramAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InstagramAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &instagramAccountR{}
			}
			foreign.R.Credential = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CredentialID) {
				local.R.InstagramAccounts = append(local.R.InstagramAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &instagramAccountR{}
				}
				foreign.R.Credential = local
				break
			}
		}
	}

	return nil
}

// AddInstagramAccounts adds the given related objects to the existing relationships
// of the credential, optionally inserting them as new records.
// Appends related to o.R.InstagramAccounts.
// Sets related.R.Credential appropriately.
func (o *Credential) AddInstagramAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InstagramAccount) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CredentialID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instagram_account\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"credential_id"}),
				strmangle.WhereClause("\"", "\"", 2, instagramAccountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CredentialID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &credentialR{
			InstagramAccounts: related,
		}
	} else {
		o.R.InstagramAccounts = append(o.R.InstagramAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &instagramAccountR{
				Credential: o,
			}
		} else {
			rel.R.Credential = o
		}
	}
	return nil
}

// SetInstagramAccounts removes all previously related items of the
// credential replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Credential's InstagramAccounts accordingly.
// Replaces o.R.InstagramAccounts with related.
// Sets related.R.Credential's InstagramAccounts accordingly.
func (o *Credential) SetInstagramAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InstagramAccount) error {
	query := "update \"instagram_account\" set \"credential_id\" = null where \"credential_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.InstagramAccounts {
			queries.SetScanner(&rel.CredentialID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Credential = nil
		}
		o.R.InstagramAccounts = nil
	}

	return o.AddInstagramAccounts(ctx, exec, insert, related...)
}

// RemoveInstagramAccounts relationships from objects passed in.
// Removes related items from R.InstagramAccounts (uses pointer comparison, removal does not keep order)
// Sets related.R.Credential.
func (o *Credential) RemoveInstagramAccounts(ctx context.Context, exec boil.ContextExecutor, related ...*InstagramAccount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CredentialID, nil)
		if rel.R != nil {
			rel.R.Credential = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("credential_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InstagramAccounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.InstagramAccounts)
			if ln > 1 && i < ln-1 {
				o.R.InstagramAccounts[i] = o.R.InstagramAccounts[ln-1]
			}
			o.R.InstagramAccounts = o.R.InstagramAccounts[:ln-1]
			break
		}
	}

	return nil
}

// Credentials retrieves all the records using an executor.
func Credentials(mods ...qm.QueryMod) credentialQuery {
	mods = append(mods, qm.From("\"credential\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"credential\".*"})
	}

	return credentialQuery{q}
}

// FindCredential retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCredential(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Credential, error) {
	credentialObj := &Credential{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"credential\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, credentialObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: unable to select from credential")
	}

	if err = credentialObj.doAfterSelectHooks(ctx, exec); err != nil {
		return credentialObj, err
	}

	return credentialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Credential) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no credential provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(credentialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	credentialInsertCacheMut.RLock()
	cache, cached := credentialInsertCache[key]
	credentialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			credentialAllColumns,
			credentialColumnsWithDefault,
			credentialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(credentialType, credentialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(credentialType, credentialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"credential\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"credential\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dm: unable to insert into credential")
	}

	if !cached {
		credentialInsertCacheMut.Lock()
		credentialInsertCache[key] = cache
		credentialInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Credential.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Credential) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	credentialUpdateCacheMut.RLock()
	cache, cached := credentialUpdateCache[key]
	credentialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			credentialAllColumns,
			credentialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dm: unable to update credential, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"credential\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, credentialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(credentialType, credentialMapping, append(wl, credentialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update credential row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by update for credential")
	}

	if !cached {
		credentialUpdateCacheMut.Lock()
		credentialUpdateCache[key] = cache
		credentialUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q credentialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all for credential")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected for credential")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CredentialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), credentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"credential\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, credentialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all in credential slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected all in update all credential")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Credential) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no credential provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(credentialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	credentialUpsertCacheMut.RLock()
	cache, cached := credentialUpsertCache[key]
	credentialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			credentialAllColumns,
			credentialColumnsWithDefault,
			credentialColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			credentialAllColumns,
			credentialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dm: unable to upsert credential, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(credentialPrimaryKeyColumns))
			copy(conflict, credentialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"credential\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(credentialType, credentialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(credentialType, credentialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dm: unable to upsert credential")
	}

	if !cached {
		credentialUpsertCacheMut.Lock()
		credentialUpsertCache[key] = cache
		credentialUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Credential record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Credential) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dm: no Credential provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), credentialPrimaryKeyMapping)
	sql := "DELETE FROM \"credential\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete from credential")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by delete for credential")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q credentialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dm: no credentialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from credential")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for credential")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CredentialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(credentialBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), credentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"credential\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, credentialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from credential slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for credential")
	}

	if len(credentialAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Credential) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCredential(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CredentialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CredentialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), credentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"credential\".* FROM \"credential\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, credentialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dm: unable to reload all in CredentialSlice")
	}

	*o = slice

	return nil
}

// CredentialExists checks if the Credential row exists.
func CredentialExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"credential\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dm: unable to check if credential exists")
	}

	return exists, nil
}
