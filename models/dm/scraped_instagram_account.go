// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ScrapedInstagramAccount is an object representing the database table.
type ScrapedInstagramAccount struct {
	ID                    int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	InstagramID           string    `boil:"instagram_id" json:"instagram_id" toml:"instagram_id" yaml:"instagram_id"`
	Username              string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	FullName              string    `boil:"full_name" json:"full_name" toml:"full_name" yaml:"full_name"`
	Biography             string    `boil:"biography" json:"biography" toml:"biography" yaml:"biography"`
	FacebookID            string    `boil:"facebook_id" json:"facebook_id" toml:"facebook_id" yaml:"facebook_id"`
	IsVerified            bool      `boil:"is_verified" json:"is_verified" toml:"is_verified" yaml:"is_verified"`
	IsPrivate             bool      `boil:"is_private" json:"is_private" toml:"is_private" yaml:"is_private"`
	ProfilePictureURL     string    `boil:"profile_picture_url" json:"profile_picture_url" toml:"profile_picture_url" yaml:"profile_picture_url"`
	ExternalURL           string    `boil:"external_url" json:"external_url" toml:"external_url" yaml:"external_url"`
	BusinessCategoryName  string    `boil:"business_category_name" json:"business_category_name" toml:"business_category_name" yaml:"business_category_name"`
	CategoryName          string    `boil:"category_name" json:"category_name" toml:"category_name" yaml:"category_name"`
	IsBusinessAccount     bool      `boil:"is_business_account" json:"is_business_account" toml:"is_business_account" yaml:"is_business_account"`
	IsProfessionalAccount bool      `boil:"is_professional_account" json:"is_professional_account" toml:"is_professional_account" yaml:"is_professional_account"`
	FollowedByCount       int       `boil:"followed_by_count" json:"followed_by_count" toml:"followed_by_count" yaml:"followed_by_count"`
	FollowCount           int       `boil:"follow_count" json:"follow_count" toml:"follow_count" yaml:"follow_count"`
	MediaCount            int       `boil:"media_count" json:"media_count" toml:"media_count" yaml:"media_count"`
	HighlightCount        int       `boil:"highlight_count" json:"highlight_count" toml:"highlight_count" yaml:"highlight_count"`
	HasReels              bool      `boil:"has_reels" json:"has_reels" toml:"has_reels" yaml:"has_reels"`
	ExtractedEmail        string    `boil:"extracted_email" json:"extracted_email" toml:"extracted_email" yaml:"extracted_email"`
	HasManagement         bool      `boil:"has_management" json:"has_management" toml:"has_management" yaml:"has_management"`
	AccountID             int       `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *scrapedInstagramAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scrapedInstagramAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScrapedInstagramAccountColumns = struct {
	ID                    string
	InstagramID           string
	Username              string
	FullName              string
	Biography             string
	FacebookID            string
	IsVerified            string
	IsPrivate             string
	ProfilePictureURL     string
	ExternalURL           string
	BusinessCategoryName  string
	CategoryName          string
	IsBusinessAccount     string
	IsProfessionalAccount string
	FollowedByCount       string
	FollowCount           string
	MediaCount            string
	HighlightCount        string
	HasReels              string
	ExtractedEmail        string
	HasManagement         string
	AccountID             string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "id",
	InstagramID:           "instagram_id",
	Username:              "username",
	FullName:              "full_name",
	Biography:             "biography",
	FacebookID:            "facebook_id",
	IsVerified:            "is_verified",
	IsPrivate:             "is_private",
	ProfilePictureURL:     "profile_picture_url",
	ExternalURL:           "external_url",
	BusinessCategoryName:  "business_category_name",
	CategoryName:          "category_name",
	IsBusinessAccount:     "is_business_account",
	IsProfessionalAccount: "is_professional_account",
	FollowedByCount:       "followed_by_count",
	FollowCount:           "follow_count",
	MediaCount:            "media_count",
	HighlightCount:        "highlight_count",
	HasReels:              "has_reels",
	ExtractedEmail:        "extracted_email",
	HasManagement:         "has_management",
	AccountID:             "account_id",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var ScrapedInstagramAccountTableColumns = struct {
	ID                    string
	InstagramID           string
	Username              string
	FullName              string
	Biography             string
	FacebookID            string
	IsVerified            string
	IsPrivate             string
	ProfilePictureURL     string
	ExternalURL           string
	BusinessCategoryName  string
	CategoryName          string
	IsBusinessAccount     string
	IsProfessionalAccount string
	FollowedByCount       string
	FollowCount           string
	MediaCount            string
	HighlightCount        string
	HasReels              string
	ExtractedEmail        string
	HasManagement         string
	AccountID             string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "scraped_instagram_account.id",
	InstagramID:           "scraped_instagram_account.instagram_id",
	Username:              "scraped_instagram_account.username",
	FullName:              "scraped_instagram_account.full_name",
	Biography:             "scraped_instagram_account.biography",
	FacebookID:            "scraped_instagram_account.facebook_id",
	IsVerified:            "scraped_instagram_account.is_verified",
	IsPrivate:             "scraped_instagram_account.is_private",
	ProfilePictureURL:     "scraped_instagram_account.profile_picture_url",
	ExternalURL:           "scraped_instagram_account.external_url",
	BusinessCategoryName:  "scraped_instagram_account.business_category_name",
	CategoryName:          "scraped_instagram_account.category_name",
	IsBusinessAccount:     "scraped_instagram_account.is_business_account",
	IsProfessionalAccount: "scraped_instagram_account.is_professional_account",
	FollowedByCount:       "scraped_instagram_account.followed_by_count",
	FollowCount:           "scraped_instagram_account.follow_count",
	MediaCount:            "scraped_instagram_account.media_count",
	HighlightCount:        "scraped_instagram_account.highlight_count",
	HasReels:              "scraped_instagram_account.has_reels",
	ExtractedEmail:        "scraped_instagram_account.extracted_email",
	HasManagement:         "scraped_instagram_account.has_management",
	AccountID:             "scraped_instagram_account.account_id",
	CreatedAt:             "scraped_instagram_account.created_at",
	UpdatedAt:             "scraped_instagram_account.updated_at",
}

// Generated where

var ScrapedInstagramAccountWhere = struct {
	ID                    whereHelperint
	InstagramID           whereHelperstring
	Username              whereHelperstring
	FullName              whereHelperstring
	Biography             whereHelperstring
	FacebookID            whereHelperstring
	IsVerified            whereHelperbool
	IsPrivate             whereHelperbool
	ProfilePictureURL     whereHelperstring
	ExternalURL           whereHelperstring
	BusinessCategoryName  whereHelperstring
	CategoryName          whereHelperstring
	IsBusinessAccount     whereHelperbool
	IsProfessionalAccount whereHelperbool
	FollowedByCount       whereHelperint
	FollowCount           whereHelperint
	MediaCount            whereHelperint
	HighlightCount        whereHelperint
	HasReels              whereHelperbool
	ExtractedEmail        whereHelperstring
	HasManagement         whereHelperbool
	AccountID             whereHelperint
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperint{field: "\"scraped_instagram_account\".\"id\""},
	InstagramID:           whereHelperstring{field: "\"scraped_instagram_account\".\"instagram_id\""},
	Username:              whereHelperstring{field: "\"scraped_instagram_account\".\"username\""},
	FullName:              whereHelperstring{field: "\"scraped_instagram_account\".\"full_name\""},
	Biography:             whereHelperstring{field: "\"scraped_instagram_account\".\"biography\""},
	FacebookID:            whereHelperstring{field: "\"scraped_instagram_account\".\"facebook_id\""},
	IsVerified:            whereHelperbool{field: "\"scraped_instagram_account\".\"is_verified\""},
	IsPrivate:             whereHelperbool{field: "\"scraped_instagram_account\".\"is_private\""},
	ProfilePictureURL:     whereHelperstring{field: "\"scraped_instagram_account\".\"profile_picture_url\""},
	ExternalURL:           whereHelperstring{field: "\"scraped_instagram_account\".\"external_url\""},
	BusinessCategoryName:  whereHelperstring{field: "\"scraped_instagram_account\".\"business_category_name\""},
	CategoryName:          whereHelperstring{field: "\"scraped_instagram_account\".\"category_name\""},
	IsBusinessAccount:     whereHelperbool{field: "\"scraped_instagram_account\".\"is_business_account\""},
	IsProfessionalAccount: whereHelperbool{field: "\"scraped_instagram_account\".\"is_professional_account\""},
	FollowedByCount:       whereHelperint{field: "\"scraped_instagram_account\".\"followed_by_count\""},
	FollowCount:           whereHelperint{field: "\"scraped_instagram_account\".\"follow_count\""},
	MediaCount:            whereHelperint{field: "\"scraped_instagram_account\".\"media_count\""},
	HighlightCount:        whereHelperint{field: "\"scraped_instagram_account\".\"highlight_count\""},
	HasReels:              whereHelperbool{field: "\"scraped_instagram_account\".\"has_reels\""},
	ExtractedEmail:        whereHelperstring{field: "\"scraped_instagram_account\".\"extracted_email\""},
	HasManagement:         whereHelperbool{field: "\"scraped_instagram_account\".\"has_management\""},
	AccountID:             whereHelperint{field: "\"scraped_instagram_account\".\"account_id\""},
	CreatedAt:             whereHelpertime_Time{field: "\"scraped_instagram_account\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"scraped_instagram_account\".\"updated_at\""},
}

// ScrapedInstagramAccountRels is where relationship names are stored.
var ScrapedInstagramAccountRels = struct {
	Account                         string
	ScrapedInstagramAccountChaineds string
}{
	Account:                         "Account",
	ScrapedInstagramAccountChaineds: "ScrapedInstagramAccountChaineds",
}

// scrapedInstagramAccountR is where relationships are stored.
type scrapedInstagramAccountR struct {
	Account                         *Account                            `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	ScrapedInstagramAccountChaineds ScrapedInstagramAccountChainedSlice `boil:"ScrapedInstagramAccountChaineds" json:"ScrapedInstagramAccountChaineds" toml:"ScrapedInstagramAccountChaineds" yaml:"ScrapedInstagramAccountChaineds"`
}

// NewStruct creates a new relationship struct
func (*scrapedInstagramAccountR) NewStruct() *scrapedInstagramAccountR {
	return &scrapedInstagramAccountR{}
}

func (r *scrapedInstagramAccountR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *scrapedInstagramAccountR) GetScrapedInstagramAccountChaineds() ScrapedInstagramAccountChainedSlice {
	if r == nil {
		return nil
	}
	return r.ScrapedInstagramAccountChaineds
}

// scrapedInstagramAccountL is where Load methods for each relationship are stored.
type scrapedInstagramAccountL struct{}

var (
	scrapedInstagramAccountAllColumns            = []string{"id", "instagram_id", "username", "full_name", "biography", "facebook_id", "is_verified", "is_private", "profile_picture_url", "external_url", "business_category_name", "category_name", "is_business_account", "is_professional_account", "followed_by_count", "follow_count", "media_count", "highlight_count", "has_reels", "extracted_email", "has_management", "account_id", "created_at", "updated_at"}
	scrapedInstagramAccountColumnsWithoutDefault = []string{"instagram_id", "username", "full_name", "biography", "facebook_id", "is_verified", "is_private", "profile_picture_url", "external_url", "business_category_name", "category_name", "is_business_account", "is_professional_account", "followed_by_count", "follow_count", "media_count", "highlight_count", "has_reels", "extracted_email", "has_management", "account_id"}
	scrapedInstagramAccountColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	scrapedInstagramAccountPrimaryKeyColumns     = []string{"id"}
	scrapedInstagramAccountGeneratedColumns      = []string{}
)

type (
	// ScrapedInstagramAccountSlice is an alias for a slice of pointers to ScrapedInstagramAccount.
	// This should almost always be used instead of []ScrapedInstagramAccount.
	ScrapedInstagramAccountSlice []*ScrapedInstagramAccount
	// ScrapedInstagramAccountHook is the signature for custom ScrapedInstagramAccount hook methods
	ScrapedInstagramAccountHook func(context.Context, boil.ContextExecutor, *ScrapedInstagramAccount) error

	scrapedInstagramAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scrapedInstagramAccountType                 = reflect.TypeOf(&ScrapedInstagramAccount{})
	scrapedInstagramAccountMapping              = queries.MakeStructMapping(scrapedInstagramAccountType)
	scrapedInstagramAccountPrimaryKeyMapping, _ = queries.BindMapping(scrapedInstagramAccountType, scrapedInstagramAccountMapping, scrapedInstagramAccountPrimaryKeyColumns)
	scrapedInstagramAccountInsertCacheMut       sync.RWMutex
	scrapedInstagramAccountInsertCache          = make(map[string]insertCache)
	scrapedInstagramAccountUpdateCacheMut       sync.RWMutex
	scrapedInstagramAccountUpdateCache          = make(map[string]updateCache)
	scrapedInstagramAccountUpsertCacheMut       sync.RWMutex
	scrapedInstagramAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var scrapedInstagramAccountAfterSelectHooks []ScrapedInstagramAccountHook

var scrapedInstagramAccountBeforeInsertHooks []ScrapedInstagramAccountHook
var scrapedInstagramAccountAfterInsertHooks []ScrapedInstagramAccountHook

var scrapedInstagramAccountBeforeUpdateHooks []ScrapedInstagramAccountHook
var scrapedInstagramAccountAfterUpdateHooks []ScrapedInstagramAccountHook

var scrapedInstagramAccountBeforeDeleteHooks []ScrapedInstagramAccountHook
var scrapedInstagramAccountAfterDeleteHooks []ScrapedInstagramAccountHook

var scrapedInstagramAccountBeforeUpsertHooks []ScrapedInstagramAccountHook
var scrapedInstagramAccountAfterUpsertHooks []ScrapedInstagramAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ScrapedInstagramAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ScrapedInstagramAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ScrapedInstagramAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ScrapedInstagramAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ScrapedInstagramAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ScrapedInstagramAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ScrapedInstagramAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ScrapedInstagramAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ScrapedInstagramAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scrapedInstagramAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScrapedInstagramAccountHook registers your hook function for all future operations.
func AddScrapedInstagramAccountHook(hookPoint boil.HookPoint, scrapedInstagramAccountHook ScrapedInstagramAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		scrapedInstagramAccountAfterSelectHooks = append(scrapedInstagramAccountAfterSelectHooks, scrapedInstagramAccountHook)
	case boil.BeforeInsertHook:
		scrapedInstagramAccountBeforeInsertHooks = append(scrapedInstagramAccountBeforeInsertHooks, scrapedInstagramAccountHook)
	case boil.AfterInsertHook:
		scrapedInstagramAccountAfterInsertHooks = append(scrapedInstagramAccountAfterInsertHooks, scrapedInstagramAccountHook)
	case boil.BeforeUpdateHook:
		scrapedInstagramAccountBeforeUpdateHooks = append(scrapedInstagramAccountBeforeUpdateHooks, scrapedInstagramAccountHook)
	case boil.AfterUpdateHook:
		scrapedInstagramAccountAfterUpdateHooks = append(scrapedInstagramAccountAfterUpdateHooks, scrapedInstagramAccountHook)
	case boil.BeforeDeleteHook:
		scrapedInstagramAccountBeforeDeleteHooks = append(scrapedInstagramAccountBeforeDeleteHooks, scrapedInstagramAccountHook)
	case boil.AfterDeleteHook:
		scrapedInstagramAccountAfterDeleteHooks = append(scrapedInstagramAccountAfterDeleteHooks, scrapedInstagramAccountHook)
	case boil.BeforeUpsertHook:
		scrapedInstagramAccountBeforeUpsertHooks = append(scrapedInstagramAccountBeforeUpsertHooks, scrapedInstagramAccountHook)
	case boil.AfterUpsertHook:
		scrapedInstagramAccountAfterUpsertHooks = append(scrapedInstagramAccountAfterUpsertHooks, scrapedInstagramAccountHook)
	}
}

// One returns a single scrapedInstagramAccount record from the query.
func (q scrapedInstagramAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ScrapedInstagramAccount, error) {
	o := &ScrapedInstagramAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: failed to execute a one query for scraped_instagram_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ScrapedInstagramAccount records from the query.
func (q scrapedInstagramAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScrapedInstagramAccountSlice, error) {
	var o []*ScrapedInstagramAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dm: failed to assign all query results to ScrapedInstagramAccount slice")
	}

	if len(scrapedInstagramAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ScrapedInstagramAccount records in the query.
func (q scrapedInstagramAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to count scraped_instagram_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scrapedInstagramAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dm: failed to check if scraped_instagram_account exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *ScrapedInstagramAccount) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// ScrapedInstagramAccountChaineds retrieves all the scraped_instagram_account_chained's ScrapedInstagramAccountChaineds with an executor.
func (o *ScrapedInstagramAccount) ScrapedInstagramAccountChaineds(mods ...qm.QueryMod) scrapedInstagramAccountChainedQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"scraped_instagram_account_chained\".\"scraped_instagram_account_id\"=?", o.ID),
	)

	return ScrapedInstagramAccountChaineds(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scrapedInstagramAccountL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScrapedInstagramAccount interface{}, mods queries.Applicator) error {
	var slice []*ScrapedInstagramAccount
	var object *ScrapedInstagramAccount

	if singular {
		object = maybeScrapedInstagramAccount.(*ScrapedInstagramAccount)
	} else {
		slice = *maybeScrapedInstagramAccount.(*[]*ScrapedInstagramAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scrapedInstagramAccountR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scrapedInstagramAccountR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(scrapedInstagramAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.ScrapedInstagramAccounts = append(foreign.R.ScrapedInstagramAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.ScrapedInstagramAccounts = append(foreign.R.ScrapedInstagramAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadScrapedInstagramAccountChaineds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (scrapedInstagramAccountL) LoadScrapedInstagramAccountChaineds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScrapedInstagramAccount interface{}, mods queries.Applicator) error {
	var slice []*ScrapedInstagramAccount
	var object *ScrapedInstagramAccount

	if singular {
		object = maybeScrapedInstagramAccount.(*ScrapedInstagramAccount)
	} else {
		slice = *maybeScrapedInstagramAccount.(*[]*ScrapedInstagramAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scrapedInstagramAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scrapedInstagramAccountR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`scraped_instagram_account_chained`),
		qm.WhereIn(`scraped_instagram_account_chained.scraped_instagram_account_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load scraped_instagram_account_chained")
	}

	var resultSlice []*ScrapedInstagramAccountChained
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice scraped_instagram_account_chained")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on scraped_instagram_account_chained")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for scraped_instagram_account_chained")
	}

	if len(scrapedInstagramAccountChainedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScrapedInstagramAccountChaineds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &scrapedInstagramAccountChainedR{}
			}
			foreign.R.ScrapedInstagramAccount = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ScrapedInstagramAccountID {
				local.R.ScrapedInstagramAccountChaineds = append(local.R.ScrapedInstagramAccountChaineds, foreign)
				if foreign.R == nil {
					foreign.R = &scrapedInstagramAccountChainedR{}
				}
				foreign.R.ScrapedInstagramAccount = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the scrapedInstagramAccount to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.ScrapedInstagramAccounts.
func (o *ScrapedInstagramAccount) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"scraped_instagram_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, scrapedInstagramAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &scrapedInstagramAccountR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			ScrapedInstagramAccounts: ScrapedInstagramAccountSlice{o},
		}
	} else {
		related.R.ScrapedInstagramAccounts = append(related.R.ScrapedInstagramAccounts, o)
	}

	return nil
}

// AddScrapedInstagramAccountChaineds adds the given related objects to the existing relationships
// of the scraped_instagram_account, optionally inserting them as new records.
// Appends related to o.R.ScrapedInstagramAccountChaineds.
// Sets related.R.ScrapedInstagramAccount appropriately.
func (o *ScrapedInstagramAccount) AddScrapedInstagramAccountChaineds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ScrapedInstagramAccountChained) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ScrapedInstagramAccountID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"scraped_instagram_account_chained\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"scraped_instagram_account_id"}),
				strmangle.WhereClause("\"", "\"", 2, scrapedInstagramAccountChainedPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ScrapedInstagramAccountID = o.ID
		}
	}

	if o.R == nil {
		o.R = &scrapedInstagramAccountR{
			ScrapedInstagramAccountChaineds: related,
		}
	} else {
		o.R.ScrapedInstagramAccountChaineds = append(o.R.ScrapedInstagramAccountChaineds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scrapedInstagramAccountChainedR{
				ScrapedInstagramAccount: o,
			}
		} else {
			rel.R.ScrapedInstagramAccount = o
		}
	}
	return nil
}

// ScrapedInstagramAccounts retrieves all the records using an executor.
func ScrapedInstagramAccounts(mods ...qm.QueryMod) scrapedInstagramAccountQuery {
	mods = append(mods, qm.From("\"scraped_instagram_account\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"scraped_instagram_account\".*"})
	}

	return scrapedInstagramAccountQuery{q}
}

// FindScrapedInstagramAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScrapedInstagramAccount(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ScrapedInstagramAccount, error) {
	scrapedInstagramAccountObj := &ScrapedInstagramAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"scraped_instagram_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scrapedInstagramAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: unable to select from scraped_instagram_account")
	}

	if err = scrapedInstagramAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return scrapedInstagramAccountObj, err
	}

	return scrapedInstagramAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ScrapedInstagramAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no scraped_instagram_account provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scrapedInstagramAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scrapedInstagramAccountInsertCacheMut.RLock()
	cache, cached := scrapedInstagramAccountInsertCache[key]
	scrapedInstagramAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scrapedInstagramAccountAllColumns,
			scrapedInstagramAccountColumnsWithDefault,
			scrapedInstagramAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scrapedInstagramAccountType, scrapedInstagramAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scrapedInstagramAccountType, scrapedInstagramAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"scraped_instagram_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"scraped_instagram_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dm: unable to insert into scraped_instagram_account")
	}

	if !cached {
		scrapedInstagramAccountInsertCacheMut.Lock()
		scrapedInstagramAccountInsertCache[key] = cache
		scrapedInstagramAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ScrapedInstagramAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ScrapedInstagramAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	scrapedInstagramAccountUpdateCacheMut.RLock()
	cache, cached := scrapedInstagramAccountUpdateCache[key]
	scrapedInstagramAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scrapedInstagramAccountAllColumns,
			scrapedInstagramAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dm: unable to update scraped_instagram_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"scraped_instagram_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, scrapedInstagramAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scrapedInstagramAccountType, scrapedInstagramAccountMapping, append(wl, scrapedInstagramAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update scraped_instagram_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by update for scraped_instagram_account")
	}

	if !cached {
		scrapedInstagramAccountUpdateCacheMut.Lock()
		scrapedInstagramAccountUpdateCache[key] = cache
		scrapedInstagramAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q scrapedInstagramAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all for scraped_instagram_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected for scraped_instagram_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScrapedInstagramAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scrapedInstagramAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"scraped_instagram_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, scrapedInstagramAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all in scrapedInstagramAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected all in update all scrapedInstagramAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ScrapedInstagramAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no scraped_instagram_account provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scrapedInstagramAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scrapedInstagramAccountUpsertCacheMut.RLock()
	cache, cached := scrapedInstagramAccountUpsertCache[key]
	scrapedInstagramAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scrapedInstagramAccountAllColumns,
			scrapedInstagramAccountColumnsWithDefault,
			scrapedInstagramAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			scrapedInstagramAccountAllColumns,
			scrapedInstagramAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dm: unable to upsert scraped_instagram_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(scrapedInstagramAccountPrimaryKeyColumns))
			copy(conflict, scrapedInstagramAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"scraped_instagram_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scrapedInstagramAccountType, scrapedInstagramAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scrapedInstagramAccountType, scrapedInstagramAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dm: unable to upsert scraped_instagram_account")
	}

	if !cached {
		scrapedInstagramAccountUpsertCacheMut.Lock()
		scrapedInstagramAccountUpsertCache[key] = cache
		scrapedInstagramAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ScrapedInstagramAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ScrapedInstagramAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dm: no ScrapedInstagramAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scrapedInstagramAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"scraped_instagram_account\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete from scraped_instagram_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by delete for scraped_instagram_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scrapedInstagramAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dm: no scrapedInstagramAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from scraped_instagram_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for scraped_instagram_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScrapedInstagramAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(scrapedInstagramAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scrapedInstagramAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"scraped_instagram_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scrapedInstagramAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from scrapedInstagramAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for scraped_instagram_account")
	}

	if len(scrapedInstagramAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ScrapedInstagramAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScrapedInstagramAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScrapedInstagramAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScrapedInstagramAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scrapedInstagramAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"scraped_instagram_account\".* FROM \"scraped_instagram_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scrapedInstagramAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dm: unable to reload all in ScrapedInstagramAccountSlice")
	}

	*o = slice

	return nil
}

// ScrapedInstagramAccountExists checks if the ScrapedInstagramAccount row exists.
func ScrapedInstagramAccountExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"scraped_instagram_account\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dm: unable to check if scraped_instagram_account exists")
	}

	return exists, nil
}
