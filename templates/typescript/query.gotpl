// Generated by gosql: DO NOT EDIT.
import { {{- range $controller := .Controllers}}{{.CamelName}}, {{- end}} } from "./types";


export interface Pagination {
  limit: number;
  cursor: string;
}

export interface FilterValue {
  equals?: string;
  notEquals?: string;
  isIn?: string[];
  isNotIn?: string[];
  isLessThan?: string;
  isLessThanOrEqual?: string;
  isGreaterThan?: string;
  isGreaterThanOrEqual?: string;
  or?: FilterValue;
}

{{ $hasMultipleAuthFields := .HasMultipleAuthFields }}
{{ $authFields := .AuthFields }}


{{- range $controller := .Controllers }}
{{$columns := .Columns}}
  {{- range $column := .Columns }}
		{{- if .Type.IsNullable }}
			interface {{ $controller.CamelName }}{{ $column.CamelName }}Filter extends FilterValue {
				isNull?: string;
				isNotNull?: string;
			}
		{{- end}}
	{{- end }}

	export interface {{ .CamelName }}Filter {
		{{- range $column := .Columns }}
			{{- if .Expose }}
       {{- if .IsRelation }}
            {{ .SnakeName }}?: {{ .CamelName }}Filter;
        {{- else}}
            {{- if .Type.IsNullable }}
              {{ .SnakeName }}?: {{ $controller.CamelName }}{{ $column.CamelName }}Filter;
            {{- else}}
              {{ .SnakeName }}?: FilterValue;
            {{- end }}
        {{- end}}
      {{- end}}
		{{- end }}
	}

  export interface {{.CamelName}}Order {
    {{- range $column := .Columns }}
      {{- if .Expose }}
        {{ .SnakeName }}?: "asc" | "desc";
      {{- end}}
    {{- end }}
  }

    export type {{.CamelName}}Select = Array<{{ typeArray .Columns}}>
  
  {{ $fromType := authFromType $authFields $columns }}
    export type {{.CamelName}}From = {{- if stringArrayIsFilled $fromType }}{{ $fromType }}{{- else}}never{{- end}}

   export type {{ $controller.CamelName }}Relations<T extends "array" | "noArray"> = T extends "array" ?{
      {{- range $relation := .Relations}}
          {{ toSnake .Name }}?: {{ .SingularName }}Relations<{{- if .IsArray}}"array"{{- else}}"noArray"{{- end}}>;
      {{- end}}
        _limit?:number;
        _page?:number;
        _select? : {{ .CamelName }}Select;
        _order? : {{ .CamelName }}Order;
        _where?:{{ .CamelName }}Filter;
      } : {
      {{- range $relation := .Relations}}
          {{ toSnake .Name }}?: {{ .SingularName }}Relations<{{- if .IsArray}}"array"{{- else}}"noArray"{{- end}}>;
      {{- end}}
       _select? : {{ .CamelName }}Select;
   }
{{ end }}

export type Filter<T> = {{- range $controller := .Controllers }} T extends {{.CamelName}} ? {{.CamelName}}Filter : {{- end }} {}
export type Relations<T> = {{- range $controller := .Controllers }} T extends {{.CamelName}} ? {{.CamelName}}Relations<"noArray"> : {{- end }} {}
export type Order<T> = {{- range $controller := .Controllers }} T extends {{.CamelName}} ? {{.CamelName}}Order : {{- end }} {}
export type Select<T> = {{- range $controller := .Controllers }} T extends {{.CamelName}} ? {{.CamelName}}Select : {{- end }} {}
export type From<T> = {{- range $controller := .Controllers }} T extends {{.CamelName}} ? {{.CamelName}}From : {{- end }} {}

export type Query<T> = T extends {{- range $controller := .Controllers }} {{.CamelName}}[] | {{- end}} never
  ? {
      filter?: Filter<T[0]>;
      relations?: Relations<T[0]>;
      order?: Order<T[0]>;
      select?: Select<T[0]>;
      from?: From<T[0]>;
      pagination?:Pagination
    }
  : {
      relations?: Relations<T>;
      select?: Select<T>;
      from?: From<T>;
      filter?: null;
      order?: null;
      pagination?:null
    };

export function query<T>({ filter, relations, order, select, from, pagination }: Query<T>) {
  const queries: string[] = [];

  if (filter) {
    queries.push("&filter=" + encodeURIComponent(JSON.stringify(filter)));
  }

  if (relations) {
    queries.push("&rels=" + encodeURIComponent(JSON.stringify(relations)));
  }

  if (order) {
    queries.push("&order=" + encodeURIComponent(JSON.stringify(order)));
  }

  if (select) {
    queries.push("&select=" + encodeURIComponent(JSON.stringify(select)));
  }

  if (from) {
    queries.push("&from=" + encodeURIComponent(JSON.stringify(from)));
  }

  if (pagination) {
    queries.push("&limit=" + pagination.limit );

    if (pagination.cursor) {
      queries.push("&cursor=" + pagination.cursor);
    }
  }

  return queries.join("").replace("&", "?");
}
