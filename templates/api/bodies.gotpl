// Generated by gosql: DO NOT EDIT.
package {{ .PackageName}}

import (
	"github.com/gin-gonic/gin"

	{{ range $v := .Imports }}
    "{{ . }}"
	{{- end }}
)
{{ $authFields := .AuthFields}}

{{ range $controller := .Controllers }}
	{{ $isAuthOrganizationUser := .IsAuthOrganizationUser}}
	{{ $createColumns := .CreateColumns}}
	{{ $updateColumns := .UpdateColumns}}

	{{- if $isAuthOrganizationUser}}
		type {{ .CamelName }}CreateBodyWithoutRelations struct {
			{{ range $column := .CreateColumns }}
				{{- if isProtected $controller.ProtectedRoutes "CREATE" }}
					{{- if (isNotInJwtField .SnakeName $authFields) }}
						{{ .CamelName }} {{ if isNullableForInput . }}*{{- end}}{{ .Type.GoTypeName }} `json:"{{ .SnakeName }}"{{ getValidate . false}}`
					{{- end}}
				{{- else}}
					{{ .CamelName }} {{ if isNullableForInput . }}*{{- end}}{{ .Type.GoTypeName }} `json:"{{ .SnakeName }}"{{ getValidate . false}}`
				{{- end }}
			{{- end }}
		}
	{{- end}}
	
	type {{ .CamelName }}CreateBody struct {
		{{ range $column := .CreateColumns }}
			{{- if isProtected $controller.ProtectedRoutes "CREATE" }}
				{{- if or (isNotInJwtField .SnakeName $authFields) ($isAuthOrganizationUser) }}
					{{ .CamelName }} {{ if isNullableForInput . }}*{{- end}}{{ .Type.GoTypeName }} `json:"{{ .SnakeName }}"{{ getValidate . false}}`
				{{- end}}
			{{- else}}
				{{ .CamelName }} {{ if isNullableForInput . }}*{{- end}}{{ .Type.GoTypeName }} `json:"{{ .SnakeName }}"{{ getValidate . false}}`
			{{- end }}
		{{- end }}
	}
	
	type {{ .CamelName }}UpdateBody struct {
		{{ range $column := .UpdateColumns }}
		{{- if isProtected $controller.ProtectedRoutes "UPDATE" }}
			{{- if or (isNotInJwtField .SnakeName $authFields) ($isAuthOrganizationUser) }}
				{{ .CamelName }} *{{ .Type.GoTypeName }} `json:"{{  .SnakeName }}"{{ getValidate . true}}`
			{{- end}}
		{{- else}}
			{{ .CamelName }} *{{ .Type.GoTypeName }} `json:"{{  .SnakeName }}"{{ getValidate . true}}`
		{{- end}}
		{{- end }}
	}

	func Parse{{ .CamelName }}CreateBody(context *gin.Context) (*{{ .CamelName }}CreateBody, error) {
		var body {{ .CamelName }}CreateBody
		if err := BindAndValidateJSON(context, &body); err != nil {
			return nil, err
		}

		return &body, nil
	}

	func {{ .CamelName}}CreateBodyToSqlBoiler(context *gin.Context, body *{{ .CamelName }}CreateBody) *dm.{{ .CamelName }} {
		{{- if isFalse (isAuthTable .)}}
			{{- if and (hasAuthFields $authFields) (isProtected $controller.ProtectedRoutes "CREATE") }}
				{{- range $authField := $authFields }}
					{{- if isAuthFieldInModel $createColumns .}}
						{{ firstToLower $authField.CamelName }} := context.Value("{{ $authField.SnakeName }}").({{ $authField.GoType}})
					{{- end}}
				{{- end }}
			{{- end}}
		{{- end}}

		model := dm.{{ .CamelName }}{
			{{- range $column := .CreateColumns }}
				{{- if and (hasAuthFields $authFields) (isProtected $controller.ProtectedRoutes "CREATE") }}
					{{- if and (isInJwtField .SnakeName $authFields) (isFalse $isAuthOrganizationUser)}}
						{{ .CamelName }}: {{- if isNullableForInput .}}null.{{ firstToUpper .Type.GoTypeName}}From({{firstToLower .CamelName }}){{- else}}{{firstToLower .CamelName }}{{- end}},
					{{- else}}
						{{- if isNullableForInput .}}
						{{- else}}
							{{ .CamelName }}: body.{{ .CamelName }},
						{{- end}}
					{{- end}}
				{{- else }}
					{{- if isNullableForInput .}}
					{{- else}}
						{{ .CamelName }}: body.{{ .CamelName }},
					{{- end}}
				{{- end }}
			{{- end }}
		}

		{{ range $column := .UpdateColumns }}
		{{- if and (isInJwtField .SnakeName $authFields) (isFalse $isAuthOrganizationUser)}}
		{{- else}}
			{{- if isNullableForInput .}}
				if body.{{ .CamelName }} != nil {
				{{- if isNullableDBType .}}
					{{- if and (hasAuthFields $authFields) (isProtected $controller.ProtectedRoutes "CREATE") }} // TODO: check if CREATE is correct or UPDATE
						{{- if and (isInJwtField .SnakeName $authFields) (isFalse $isAuthOrganizationUser)}}
							{{- if eq .Type.GoTypeName "string" }}
								if *body.{{ .CamelName }} == "null" {
									
									model.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}{}
								} else {
									model.{{ .CamelName }} = null.{{ firstToUpper (splitOnDotFirst .Type.GoTypeName)}}From(*{{ firstToLower .CamelName }})
								}
							{{- else}}
								model.{{ .CamelName }} = null.{{ firstToUpper (splitOnDotFirst .Type.GoTypeName)}}From(*{{ firstToLower .CamelName }})
							{{- end}}
						{{- else}}
						{{- if eq .Type.GoTypeName "string" }}
							if *body.{{ .CamelName }} == "null" {
								model.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}{}
							} else {
								model.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
							}
						{{- else}}
							model.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
						{{- end}}
					{{- end}}
				{{- else }}
					{{- if eq .Type.GoTypeName "string" }}
						if *body.{{ .CamelName }} == "null" {
							model.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}{}
						} else
							model.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
						}
					{{- else}}
						model.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
					{{- end}}
				{{- end}}
					
				{{- else }}
					{{- if and (hasAuthFields $authFields) (isProtected $controller.ProtectedRoutes "CREATE") }} // TODO: check if CREATE is correct or UPDATE
						{{- if and (isInJwtField .SnakeName $authFields) (isFalse $isAuthOrganizationUser)}}
							model.{{ .CamelName }} = *{{ firstToLower .CamelName }}
						{{- else}}
							model.{{ .CamelName }} = *body.{{ .CamelName }}
						{{- end}}
					{{- else}}
						model.{{ .CamelName }} = *body.{{ .CamelName }}
					{{- end}}
				{{- end}}
				}
			{{- end}}
			{{- end }}
		{{- end }}
		return &model
	}

	func Parse{{ .CamelName }}UpdateBody(context *gin.Context) (*{{ .CamelName }}UpdateBody, error) {
		var body {{ .CamelName }}UpdateBody
		if err := BindAndValidateJSON(context, &body); err != nil {
			return nil, err
		}

		return &body, nil
	}

	func {{ .CamelName}}UpdateBodyToSqlBoiler(context *gin.Context, body *{{ .CamelName }}UpdateBody, oldModel *dm.{{ .CamelName }}) *dm.{{ .CamelName }} {
		{{- if isFalse (isAuthTable .)}}
			{{- if and (hasAuthFields $authFields) (isProtected $controller.ProtectedRoutes "UPDATE") }}
				{{- range $authField := $authFields }}
					{{- if isAuthFieldInModel $updateColumns .}}
						{{ firstToLower $authField.CamelName }} := context.Value("{{ $authField.SnakeName }}").({{ $authField.GoType}})
					{{- end}}
				{{- end }}
			{{- end}}
		{{- end}}

		{{- range $column := .UpdateColumns }}
			{{- if and (hasAuthFields $authFields)  (isProtected $controller.ProtectedRoutes "UPDATE") }} // TODO: check if UPDATE is correct or CREATE
				{{- if and (isInJwtField .SnakeName $authFields) (isFalse $isAuthOrganizationUser)}}
					oldModel.{{ .CamelName }} = {{- if isNullableDBType .}}null.{{firstToUpper .Type.GoTypeName}}From({{firstToLower .CamelName }}){{- else}}{{firstToLower .CamelName }}{{- end}}
				{{- else}}
					if body.{{ .CamelName }} != nil {
						{{- if isNullableDBType .}}
							{{- if eq .Type.GoTypeName "string"}}
								if *body.{{ .CamelName }} == "null"  {
									oldModel.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}{}
								} else {
									oldModel.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
								}
							{{- else}}
								oldModel.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
							{{- end}}
						{{- else }}
							oldModel.{{ .CamelName }} = *body.{{ .CamelName }}
						{{- end}}
					}
				{{- end}}
			{{- else}}
				if body.{{ .CamelName }} != nil {
					{{- if isNullableDBType .}}
						{{- if eq .Type.GoTypeName "string"}}
							if *body.{{ .CamelName }} == "null" {
								oldModel.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}{}
							} else {
								oldModel.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
							}
						{{- else}}
							oldModel.{{ .CamelName }} = null.{{ firstToUpper  (splitOnDotFirst .Type.GoTypeName)}}From(*body.{{ .CamelName }})
						{{- end}}
					{{- else }}
						oldModel.{{ .CamelName }} = *body.{{ .CamelName }}
					{{- end}}
				}
			{{- end}}
		{{ end }}
		return oldModel
	}


{{ end }}