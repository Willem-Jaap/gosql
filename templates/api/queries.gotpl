// Generated by gosql: DO NOT EDIT.
package {{ .PackageName }}

import (
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

{{ $authFields := .AuthFields }}
{{ $hasMultipleAuthFields := .HasMultipleAuthFields }}

{{ range $controller := .Controllers }}
	{{ $columns := .Columns }}

	type {{ .CamelName }}Query struct {
		Relations *{{ .CamelName }}Relations `json:"relations"`
		SelectColumns []string `json:"select_columns"`
	}

	func parse{{ .CamelName }}Query(context *gin.Context) (*{{ .CamelName }}Query, error) {
		relations := context.DefaultQuery("rels", "{}")
		selects := context.DefaultQuery("select", "[]")
		
		r, err := parse{{ .CamelName }}Relations(relations)
		if err != nil {
			return nil, err
		}

		s, err := parse{{ .CamelName }}Selects(selects)
		if err != nil {
			return nil, err
		}

		return &{{ .CamelName }}Query{
			Relations: r,
			SelectColumns: s,
		}, nil
	}

	func parse{{ .CamelName }}QueryToMods(context *gin.Context) ([]qm.QueryMod, error) {
		query, err := parse{{ .CamelName }}Query(context)
		if err != nil {
			return nil, err
		}

		var queryMods []qm.QueryMod

		if query.Relations != nil {
			relationQueryMods, err := parse{{ .CamelName }}RelationsToMods(query.Relations, "")
			if err != nil {
				return nil, err
			}
			queryMods = append(queryMods, relationQueryMods...)
		}

		if len(query.SelectColumns) > 0 {
			selectQueryMods, err := parse{{ .CamelName }}SelectsToMods(query.SelectColumns)
			if err != nil {
				return nil, err
			}
			queryMods = append(queryMods, selectQueryMods)
		}

		return queryMods, nil
	}

	type {{ .CamelName }}ListQuery struct {
		Page   int    `json:"page"`
		Limit  int    `json:"limit"`
		Filter *{{ .CamelName }}Filter `json:"filter"`
		Orders *{{ .CamelName }}OrderColumns `json:"orders"`
	}

	func parse{{ .CamelName }}ListQuery(context *gin.Context) (*{{ .CamelName }}ListQuery, error) {
		page := context.DefaultQuery("page", "0")
		limit := context.DefaultQuery("limit", "10")
		filter := context.DefaultQuery("filter", "{}")
		orders := context.DefaultQuery("order", "{}")

		f, err := parse{{ .CamelName }}Filter(filter)
		if err != nil {
			return nil, err
		}

		o, err := parse{{ .CamelName }}Orders(orders)
		if err != nil {
			return nil, err
		}

		pageInInt, err := strconv.Atoi(page)
		if err != nil {
			return nil, err
		}

		limitInInt, err := strconv.Atoi(limit)
		if err != nil {
			return nil, err
		}

		if limitInInt > 25 {
			limitInInt = 25
		}

		return &{{ .CamelName }}ListQuery{
			Page:   pageInInt,
			Limit:  limitInInt,
			Filter: f,
			Orders: o,
		}, nil
	}

	func Parse{{ .CamelName }}ListQueryToMods(context *gin.Context) ([]qm.QueryMod, error) {
		query, err := parse{{ .CamelName }}ListQuery(context)
		if err != nil {
			return nil, err
		}

		var queryMods []qm.QueryMod

		queryMods = append(queryMods, qm.Offset(query.Page))
		queryMods = append(queryMods, qm.Limit(query.Limit))

		if query.Filter != nil {
			filterQueryMods, err := parse{{ .CamelName }}FilterToMods(query.Filter, "")
			if err != nil {
				return nil, err
			}
			queryMods = append(queryMods, filterQueryMods...)
		}

		if query.Orders != nil {
			ordersQueryMods, err := parse{{ .CamelName }}OrdersToMods(query.Orders)
			if err != nil {
				return nil, err
			}
			queryMods = append(queryMods, ordersQueryMods...)
		}

		extraMods,err := parse{{ .CamelName }}QueryToMods(context)
		if err != nil {
			return nil, err
		}

		return append(queryMods, extraMods...), nil
	}

	func Parse{{ .CamelName }}ByIDParamToMods(context *gin.Context) ([]qm.QueryMod, error) {
		id := context.Param("id")
		idInInt, err := strconv.Atoi(id)
		if err != nil {
			return nil, err
		}

		queryMods, err := parse{{ .CamelName }}QueryToMods(context)
		if err != nil {
			return nil, err
		}

		return append(queryMods, []qm.QueryMod{qm.Where("id = ?", idInInt)}...), nil
	}

	{{ if $hasMultipleAuthFields }} 
		type {{ .CamelName }}AuthQuery struct {
			{{ range $auth := $authFields }}
				{{- if isAuthFieldInModel $columns .}}
					{{ .TableCamelName }} bool `json:"{{ .TableSnakeName }}"`
				{{- end }}
			{{- end }}
		}

		func parse{{.CamelName}}AuthQuery(context *gin.Context) (*{{.CamelName}}AuthQuery, error) {
			from := context.DefaultQuery("from", "all")

			{{ range $auth := $authFields }}
				{{- if isAuthFieldInModel $columns .}}
					from{{ .TableCamelName }} := false
				{{- end }}
			{{- end}}

			switch from {
				{{- range $auth := $authFields }}
					{{- if isAuthFieldInModel $columns .}}
						case "{{ .TableSnakeName }}":
							from{{ .TableCamelName }} = true
					{{- end }}
				{{- end }}
				default:
					{{- range $auth := $authFields }}
						{{- if isAuthFieldInModel $columns .}}
							from{{ .TableCamelName }} = true
						{{- end}}
					{{- end }}
			}

			return &{{.CamelName}}AuthQuery{
				{{- range $auth := $authFields }}
					{{- if isAuthFieldInModel $columns .}}
						{{ .TableCamelName }}: from{{ .TableCamelName }},
					{{- end}}
				{{- end }}
			}, nil
		}
	{{- end }}

	func Parse{{ .CamelName }}AuthToMods(context *gin.Context) ([]qm.QueryMod, error) {
		{{- if and (areAuthFieldsInModel .Columns $authFields) ($hasMultipleAuthFields) (not .IsAuthUser) (not .IsAuthOrganization)}}
			authQuery, err := parse{{ .CamelName }}AuthQuery(context)
			if err != nil {
				return nil, err
			}
		{{- end}}

		var queryMods []qm.QueryMod
		{{ $isAuthUser := .IsAuthUser}}
		{{ $isAuthOrganization := .IsAuthOrganization}}

		{{ range $auth := $authFields }}
			{{- if isAuthFieldInModel $columns .}}
				{{- if and ($hasMultipleAuthFields) (not $isAuthUser) (not $isAuthOrganization)}}
					if authQuery.{{ .TableCamelName }} {
						queryMods = append(queryMods, qm.Where("{{ $controller.SnakeName }}.{{ .SnakeName }} = ?", context.Value("{{ .SnakeName }}").({{ .GoType }})))
					}
				{{- else }}
					queryMods = append(queryMods, qm.Where("{{ $controller.SnakeName }}.{{ .SnakeName }} = ?", context.Value("{{ .SnakeName }}").({{ .GoType }})))
				{{- end}}
			{{- else }}
				{{- if or (and $isAuthUser .IsFromUserTable) (and $isAuthOrganization .IsFromOrganizationTable)}}
					queryMods = append(queryMods, qm.Where("{{ $controller.SnakeName }}.{{ toLower .NormalName }} = ?", context.Value("{{ .SnakeName }}").({{ .GoType }})))
				{{- end}}
				
			{{- end}}
		{{- end}}


		return queryMods, nil
	}

{{ end }}