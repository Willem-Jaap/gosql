// Generated by gosql: DO NOT EDIT.
package {{ .PackageName}}

import (
    "database/sql"
    "os"
    "fmt"
    "time"

	"github.com/gin-gonic/gin"
    "github.com/gin-contrib/cors"
)

type ApiConfig struct {
    AllowOrigins []string
    AllowMethods []string
	AllowHeaders []string
	CustomRoutes func(router *gin.Engine) *gin.Engine
    ExtraAuthMiddleware func(g *gin.Context)
}

func RunApi(db *sql.DB, c *ApiConfig) {
    controllers := newClient(db)
    defer db.Close()

    if os.Getenv("GIN_MODE") == "release" {
		gin.SetMode(gin.ReleaseMode)
	}

    router := gin.Default()
	router.Use(cors.New(cors.Config{
		AllowMethods:     append(c.AllowMethods, []string{"GET", "POST", "PATCH", "DELETE", "OPTIONS"}...),
		AllowHeaders:     append(c.AllowHeaders, []string{"Origin", "Content-Length", "Content-Type", "Authorization", "Access-Control-Allow-Credentials", "cookie"}...),
		AllowOrigins:     c.AllowOrigins,
		MaxAge:           12 * time.Hour,
		AllowCredentials: true,
	}))

    {{- if hasAuthFields .AuthFields }}
        router.POST("/auth/signin", controllers.Auth.SignIn)
        router.POST("/auth/signup", controllers.Auth.SignUp)
        router.POST("/auth/signout", controllers.Auth.SignOut)
        router.Use(AuthMiddleware(c.ExtraAuthMiddleware)).GET("/auth/me", controllers.Auth.Me)
        {{- if .HasOrganization }}
            router.Use(AuthMiddleware(c.ExtraAuthMiddleware)).POST("/auth/switch", controllers.Auth.SwitchOrganization)
        {{- end}}
    {{- end}}

    

    {{ range $controller := .Controllers }}
        {{ firstToLower .CamelName }} := router.Group("/{{ .SnakeName }}"){{ if everyRouteIsProtected .ProtectedRoutes }}.Use(AuthMiddleware(c.ExtraAuthMiddleware)){{- end}}
        {{ firstToLower .CamelName }}.{{- if everyRouteIsProtected .ProtectedRoutes }}{{- else if isProtected .ProtectedRoutes "LIST" }}Use(AuthMiddleware(c.ExtraAuthMiddleware)).{{- end}}GET("", controllers.{{ .CamelName}}.List)
        {{ firstToLower .CamelName }}.{{- if everyRouteIsProtected .ProtectedRoutes }}{{- else if isProtected .ProtectedRoutes "BYID" }}Use(AuthMiddleware(c.ExtraAuthMiddleware)).{{- end}}GET(":id", controllers.{{ .CamelName}}.ByID)
        {{ firstToLower .CamelName }}.{{- if everyRouteIsProtected .ProtectedRoutes }}{{- else if isProtected .ProtectedRoutes "CREATE" }}Use(AuthMiddleware(c.ExtraAuthMiddleware)).{{- end}}POST("", controllers.{{ .CamelName}}.Create)
        {{ firstToLower .CamelName }}.{{- if everyRouteIsProtected .ProtectedRoutes }}{{- else if isProtected .ProtectedRoutes "UPDATE" }}Use(AuthMiddleware(c.ExtraAuthMiddleware)).{{- end}}PATCH(":id", controllers.{{ .CamelName}}.Update)
        {{ firstToLower .CamelName }}.{{- if everyRouteIsProtected .ProtectedRoutes }}{{- else if isProtected .ProtectedRoutes "DELETE" }}Use(AuthMiddleware(c.ExtraAuthMiddleware)).{{- end}}DELETE(":id", controllers.{{ .CamelName}}.Delete)
    {{ end }}

    if c.CustomRoutes != nil {
        router = c.CustomRoutes(router)
    }

    port := os.Getenv("PORT")   
	if port == "" {
		port = "8080"
	}
    panic(router.Run(fmt.Sprintf("localhost:%s", port)))
}