package {{ .PackageName }}

import (
{{ range $v := .Imports }}
    "{{ . }}"
{{- end }}
)

type {{ .CamelName }} struct {
    {{- range $column := .Columns }}
        {{- if eq .Type.GoTypeName "time.Time" }}
            {{ .CamelName }} string `boil:"{{ .SnakeName }}" json:"{{ if .Expose }}{{ .SnakeName }},omitempty{{- else}}-{{- end}}" toml:"{{ .SnakeName }}" yaml:"{{  .SnakeName }}"`
        {{- else}}
            {{ .CamelName }} {{ .Type.GoTypeName }} `boil:"{{ .SnakeName }}" json:"{{ if .Expose }}{{ .SnakeName }},omitempty{{- else}}-{{- end}}" toml:"{{ .SnakeName }}" yaml:"{{  .SnakeName }}"`
        {{- end}}
    {{- end }}

    {{ range $relation := .Relations }}
        {{ .Name }} {{ .Type }} `boil:"{{ toSnake .Name }}" json:"{{ toSnake .Name }},omitempty" toml:"{{ toSnake .Name }}" yaml:"{{ toSnake .Name }}"`
    {{- end }}
}

type {{ .CamelName }}Slice []*{{ .CamelName }}

func SqlBoiler{{ pluralize .CamelName }}ToApi{{ pluralize .CamelName }}(a dm.{{ .CamelName }}Slice, exclude []string) {{ .CamelName }}Slice {
    if exclude == nil {
        exclude = []string{}
    }
    var s = make({{ .CamelName }}Slice, len(a))
    for i, d := range a {
        s[i] = SqlBoiler{{ .CamelName }}ToApi{{ .CamelName }}(d, exclude)
    }
    return s
}

func SqlBoiler{{ .CamelName }}ToApi{{ .CamelName }}(a *dm.{{ .CamelName }}, exclude []string) *{{ .CamelName }} {
    if exclude == nil {
        exclude = []string{}
    }
    
    p := {{ .CamelName }}{
        {{- range $column := .Columns }}
        {{- if isNullableDBType .}}
            {{- if eq .Type.GoTypeName "time.Time" }}
                {{ .CamelName }}: convertTime(a.{{ .CamelName }}),
            {{- else}}
                {{ .CamelName }}: null{{ firstToUpper .Type.GoTypeName }}(a.{{ .CamelName }}),
            {{- end}}
        {{- else }}
            {{- if eq .Type.GoTypeName "time.Time" }}
                {{ .CamelName }}: convertTime(a.{{ .CamelName }}),
            {{- else}}
                {{ .CamelName }}: a.{{ .CamelName }},
            {{- end}}
        {{- end}}
        {{- end}}
    }

    {{ $camelName := .CamelName }}
    if a.R != nil {
        {{- range $relation := .Relations }}
            if a.R.{{ .Name }} != nil && doesNotContain(exclude,"{{ $camelName}}.{{ .SingularName }}") {
                p.{{ .Name }} = SqlBoiler{{ .Name }}ToApi{{.Name}}(a.R.{{ .Name }}, append(exclude, "{{ .SingularName}}.{{ $camelName }}"))
            }
        {{- end }}
    }

    return &p
}

