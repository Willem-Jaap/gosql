// Generated by gosql: DO NOT EDIT.
package {{ .PackageName }}

import (
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

{{ range $controller := .Controllers }}
	type {{ .CamelName }}ListQuery struct {
		Page   int    `json:"page"`
		Limit  int    `json:"limit"`
		Filter *{{ .CamelName }}Filter `json:"filter"`
		Relations *{{ .CamelName }}Relations `json:"relations"`
		Orders *{{ .CamelName }}OrderColumns `json:"orders"`
	}

	func parse{{ .CamelName }}ListQuery(context *gin.Context) (*{{ .CamelName }}ListQuery, error) {
		page, pageExists := context.GetQuery("page")
		limit, limitExists := context.GetQuery("limit")
		filter, filterExists := context.GetQuery("filter")
		relations, relationsExists := context.GetQuery("rels")
		orders, ordersExists := context.GetQuery("order")

		if !pageExists {
			page = "0"
		}

		if !limitExists {
			limit = "10"
		}

		if !filterExists {
			filter = "{}"
		}

		if !relationsExists {
			relations = "{}"
		}

		if !ordersExists {
			orders = "{}"
		}

		f, err := parse{{ .CamelName }}Filter(filter)
		if err != nil {
			return nil, err
		}

		r, err := parse{{ .CamelName }}Relations(relations)
		if err != nil {
			return nil, err
		}

		o, err := parse{{ .CamelName }}Orders(orders)
		if err != nil {
			return nil, err
		}


		pageInInt, err := strconv.Atoi(page)
		if err != nil {
			return nil, err
		}

		limitInInt, err := strconv.Atoi(limit)
		if err != nil {
			return nil, err
		}

		return &{{ .CamelName }}ListQuery{
			Page:   pageInInt,
			Limit:  limitInInt,
			Filter: f,
			Relations: r,
			Orders: o,
		}, nil
	}

	func parse{{ .CamelName }}ListQueryToMods(context *gin.Context) ([]qm.QueryMod, error) {
		query, err := parse{{ .CamelName }}ListQuery(context)
		if err != nil {
			return nil, err
		}

		var queryMods []qm.QueryMod

		queryMods = append(queryMods, qm.Offset(query.Page))
		queryMods = append(queryMods, qm.Limit(query.Limit))

		if query.Filter != nil {
			filterQueryMods, err := parse{{ .CamelName }}FilterToMods(query.Filter)
			if err != nil {
				return nil, err
			}
			queryMods = append(queryMods, filterQueryMods...)
		}

		if query.Relations != nil {
			relationQueryMods, err := parse{{ .CamelName }}RelationsToMods(query.Relations)
			if err != nil {
				return nil, err
			}
			queryMods = append(queryMods, relationQueryMods...)
		}


		if query.Orders != nil {
			ordersQueryMods, err := parse{{ .CamelName }}OrdersToMods(query.Orders)
			if err != nil {
				return nil, err
			}
			queryMods = append(queryMods, ordersQueryMods...)
		}

		return queryMods, nil
	}
{{ end }}
