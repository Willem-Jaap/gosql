// Generated by gosql: DO NOT EDIT.
package {{ .PackageName }}

import (
	"encoding/json"

	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type FilterValue struct {
	Equals    *string `json:"equals"`
	NotEquals *string `json:"notEquals"`
	// IsNull *bool `json:"isNull"`
	// IsNotNull *bool `json:"isNotNull"`
	IsIn                 *[]string `json:"isIn"`
	IsNotIn              *[]string `json:"isNotIn"`
	IsLessThan           *string   `json:"isLessThan"`
	IsLessThanOrEqual    *string   `json:"isLessThanOrEqual"`
	IsGreaterThan        *string   `json:"isGreaterThan"`
	IsGreaterThanOrEqual *string   `json:"isGreaterThanOrEqual"`
}

{{ range $controller := .Controllers }}
	type {{ .CamelName }}Filter struct {
		{{ range $column := .Columns }}
			{{ .CamelName }} *FilterValue `json:"{{ firstToLower .CamelName }}"`	
		{{- end }}
	}

	func parse{{ .CamelName }}Filter(filter string) (*{{ .CamelName }}Filter, error) {
		var filterValue {{ .CamelName }}Filter
		if err := json.Unmarshal([]byte(filter), &filterValue); err != nil {
			return nil, err
		}

		return &filterValue, nil
	}

	func parse{{ .CamelName}}FilterToMods(filter *{{ .CamelName}}Filter) ([]qm.QueryMod, error) {
		var queryMods []qm.QueryMod
		
		{{ range $column := .Columns }}
			if filter.{{ .CamelName }} != nil {
				if filter.{{ .CamelName }}.Equals != nil {
					queryMods = append(queryMods, qm.Where("{{ .SnakeName }} = ?", * filter.{{ .CamelName }}.Equals))
				}

				if filter.{{ .CamelName }}.NotEquals != nil {
					queryMods = append(queryMods, qm.Where("{{ .SnakeName }} != ?", * filter.{{ .CamelName }}.NotEquals))
				}

				if filter.{{ .CamelName }}.IsIn != nil {
					queryMods = append(queryMods, qm.WhereIn("{{ .SnakeName }} IN ?", * filter.{{ .CamelName }}.IsIn))
				}

				if filter.{{ .CamelName }}.IsNotIn != nil {
					queryMods = append(queryMods, qm.WhereIn("{{ .SnakeName }} NOT IN ?", * filter.{{ .CamelName }}.IsNotIn))
				}

				if filter.{{ .CamelName }}.IsLessThan != nil {
					queryMods = append(queryMods, qm.Where("{{ .SnakeName }} < ?", * filter.{{ .CamelName }}.IsLessThan))
				}

				if filter.{{ .CamelName }}.IsLessThanOrEqual != nil {
					queryMods = append(queryMods, qm.Where("{{ .SnakeName }} <= ?", * filter.{{ .CamelName }}.IsLessThanOrEqual))
				}

				if filter.{{ .CamelName }}.IsGreaterThan != nil {
					queryMods = append(queryMods, qm.Where("{{ .SnakeName }} > ?", * filter.{{ .CamelName }}.IsGreaterThan))
				}

				if filter.{{ .CamelName }}.IsGreaterThanOrEqual != nil {
					queryMods = append(queryMods, qm.Where("{{ .SnakeName }} >= ?", * filter.{{ .CamelName }}.IsGreaterThanOrEqual))
				}
			}
		{{- end }}

		return queryMods, nil
	}
{{ end }}
