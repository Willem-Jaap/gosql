package {{ .PackageName}}

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/gin-gonic/gin"

    {{- range .Imports }}
    "{{ . }}"
    {{- end }}
)

var authCalls = map[string]map[string]bool{
	"all": {},
}

func CallMiddleware(c *gin.Context) {
	role := c.Value("role")

	method := strings.ToUpper(c.Request.Method)
	path := strings.TrimSuffix(strings.TrimPrefix(strings.ToLower(c.Request.URL.Path), "/"), "/")
	pathSplitted := strings.Split(path, "/")

	var methodCalls []string
	var methodCall string

	relations, hasRelationsQuery := c.GetQuery("rels")
	if hasRelationsQuery {
		extraCalls, err := convertRelationQueryToAuthCall(relations)
		if err != nil {
			c.AbortWithStatusJSON(401, generated.ResponseWithPayload(nil, "unauthorized", "You are unauthorized", false))
			return
		}

		methodCalls = append(methodCalls, extraCalls...)
	}

	switch method {
	case "GET":
		methodCall = "list"
		if contains(c.Params, "id") {
			methodCall = "byid"
			pathSplitted = pathSplitted[:len(pathSplitted)-1]
		}
	case "POST":
		methodCall = "create"
		if contains(c.Params, "id") {
			pathSplitted = pathSplitted[:len(pathSplitted)-1]
		}
	case "PATCH":
		methodCall = "update"
		if contains(c.Params, "id") {
			pathSplitted = pathSplitted[:len(pathSplitted)-1]
		}
	case "DELETE":
		methodCall = "delete"
		if contains(c.Params, "id") {
			pathSplitted = pathSplitted[:len(pathSplitted)-1]
		}
	}

	pathCall := fmt.Sprintf("%s.%s", strings.Join(pathSplitted, "."), methodCall)
	methodCalls = append(methodCalls, pathCall)

	for _, call := range methodCalls {
		if !authCalls[role.(string)][call] && !authCalls["all"][call] {
			fmt.Println("Call not allowed:")
			fmt.Println()
			fmt.Printf(`   "%v": true`, call)
			fmt.Println()
			c.AbortWithStatusJSON(401, generated.ResponseWithPayload(nil, "unauthorized", "You are unauthorized", false))
			return
		}
	}

	c.Next()
}

func contains(strSlice []gin.Param, str string) bool {
	for _, s := range strSlice {
		if s.Key == str {
			return true
		}
	}
	return false
}

func convertRelationQueryToAuthCall(relationQuery string) ([]string, error) {
	var obj map[string]interface{}
	err := json.Unmarshal([]byte(relationQuery), &obj)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	key := recursivelyFlattenMap("", obj)
	return strings.Split(key, "-"), nil

}

func recursivelyFlattenMap(prefix string, m map[string]interface{}) string {
	var key string

	for k, v := range m {
		if strings.HasPrefix(k, "_") {
			key += prefix
			continue
		}
		switch v.(type) {
		case map[string]interface{}:
			newM := v.(map[string]interface{})
			newKey := prefix + k
			if isPlural(newKey) {
				newKey = newKey + ".list"
			} else {
				newKey = newKey + ".byid"
			}

			if len(newM) <= 0 {
				key += newKey
			}
			key2 := recursivelyFlattenMap(newKey+"-", newM)
			key += key2
		default:
			// is never called
			// keys = append(keys, prefix+k)
		}
	}

	return strings.TrimSuffix(key, "-")
}

func isPlural(word string) bool {
	if len(word) > 1 && word[len(word)-1] == 's' {
		// Most plural words end in "s"
		return true
	}
	if len(word) > 2 && word[len(word)-2:] == "es" {
		// Some plural words end in "es"
		return true
	}
	if len(word) > 2 && word[len(word)-2:] == "en" {
		// Some irregular plural words end in "en"
		return true
	}
	if len(word) > 3 && word[len(word)-3:] == "ies" {
		// Some singular words end in "y" and change to "ies" when pluralized
		return true
	}
	return false
}