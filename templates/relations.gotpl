// Generated by gosql: DO NOT EDIT.
package {{ .PackageName }}

import (
	"encoding/json"

	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

{{ range $controller := .Controllers }}
    type {{ .CamelName}}Relations struct {
        {{ range $relation := .Relations }}
            {{ .Name }} *Select{{ $controller.CamelName }}Columns `boil:"{{ firstToLower .Name }}" json:"{{ firstToLower .Name}}" toml:"{{ firstToLower .Name}}" yaml:"{{ firstToLower .Name}}"`
        {{- end }}
    }

	func parse{{ .CamelName }}Relations(relations string) (*{{ .CamelName }}Relations, error) {
		var relationsValue {{ .CamelName }}Relations
		if err := json.Unmarshal([]byte(relations), &relationsValue); err != nil {
			return nil, err
		}

		return &relationsValue, nil
	}

	func parse{{ .CamelName}}RelationsToMods(relations *{{ .CamelName}}Relations) ([]qm.QueryMod, error) {
		var queryMods []qm.QueryMod
		var selectColumns []string

		{{ range $relation := .Relations }}
			if relations.{{ .Name }} != nil {
				{{ range $column := $controller.Columns }}
					if relations.{{ $relation.Name }}.{{ .CamelName }} != nil && *relations.{{ $relation.Name }}.{{ .CamelName }} {
						selectColumns = append(selectColumns, "{{.SnakeName }}")
					}
				{{- end }}
			}
		{{- end }}

		if len(selectColumns) > 0 {
			queryMods = append(queryMods, qm.Select(selectColumns...))
		}

		return queryMods, nil
	}
{{ end }}
