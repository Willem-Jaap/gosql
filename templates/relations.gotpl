// Generated by gosql: DO NOT EDIT.
package {{ .PackageName }}

import (
	"encoding/json"

	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

{{ range $controller := .Controllers }}
    type {{ .CamelName}}Relations struct {
        {{ range $relation := .Relations }}
            // {{ .Name }} *Select{{ .SingularName }}Columns `boil:"{{ firstToLower .Name }}" json:"{{ firstToLower .Name}}" toml:"{{ firstToLower .Name}}" yaml:"{{ firstToLower .Name}}"`
			{{ .Name }} *bool `boil:"{{ firstToLower .Name }}" json:"{{ firstToLower .Name}}" toml:"{{ firstToLower .Name}}" yaml:"{{ firstToLower .Name}}"`
        {{- end }}
    }

	func parse{{ .CamelName }}Relations(relations string) (*{{ .CamelName }}Relations, error) {
		var relationsValue {{ .CamelName }}Relations
		if err := json.Unmarshal([]byte(relations), &relationsValue); err != nil {
			return nil, err
		}

		return &relationsValue, nil
	}

	func parse{{ .CamelName}}RelationsToMods(relations *{{ .CamelName}}Relations) ([]qm.QueryMod, error) {
		var queryMods []qm.QueryMod

		{{ range $relation := .Relations }}
		if  relations.{{ .Name }} != nil && *relations.{{ .Name }} {
			queryMods = append(queryMods, qm.Load("{{ .Name }}"))
		}
		{{- end }}

		// TODO: select only the columns that are needed
		// SQLBoiler returns entire struct even if values are null or empty
		// I have no idea how to fix this without adding a lot of loops / converts
		// {{ range $relation := .Relations }}
		// 	if relations.{{ .Name }} != nil {
		// 		var selectColumns []string

		// 		{{ range $column := .Columns }}
		// 			if relations.{{ $relation.Name }}.{{ .CamelName }} != nil {
		// 				selectColumns = append(selectColumns, "{{.SnakeName }}")
		// 			}
		// 		{{- end }}

		// 		if relations.{{ $relation.Name }}.SelectAll != nil && *relations.{{ $relation.Name }}.SelectAll {
		// 			selectColumns = append(selectColumns, "*")
		// 		}

		// 		if len(selectColumns) == 0 {
		// 			selectColumns = append(selectColumns, "*")
		// 		}

		// 		queryMods = append(queryMods, qm.Load("{{ .Name }}", qm.Select(selectColumns...)))
		// 	}
		// {{- end }}

		return queryMods, nil
	}
{{ end }}
